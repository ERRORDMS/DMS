@page
@model DMS.Pages.ManageUserModel
@{

    Layout = "~/Pages/_Layout.cshtml";
    string ID = "";

    ID = Convert.ToString(Request.Query["ID"]);


    if (ID == "")
    {
        <script>
            window.location = 'Dashboard';
        </script>
    }

}


<div>
    <h2 class="content-block">Roles</h2>
    @(Html.DevExtreme().DataGrid()
        .ID("rolesList")

.DataSource(d => d.Mvc()
    .Controller("api/Permissions")
    .LoadMethod("GET")
    .LoadAction("Roles")
    .Key("AutoKey")
).KeyExpr("AutoKey")

//.OnSelectionChanged("permissionsChanged")
            .ShowRowLines(true)

            .Selection(s=>
            s.Mode(SelectionMode.Multiple)
            .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)

            )
            .ShowBorders(true)
            .ColumnAutoWidth(true)
                    .ElementAttr("class", "content-block")

            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption("Permission");

            })
    )


    <br />
    <h2 class="content-block">Permissions</h2>
    @(Html.DevExtreme().DataGrid()
        .ID("permissionsList")

.DataSource(d => d.Mvc()
    .Controller("api/Permissions")
    .LoadMethod("GET")
    .LoadAction("Permissions")
    .Key("AutoKey")
).KeyExpr("AutoKey")

//.OnSelectionChanged("permissionsChanged")
            .ShowRowLines(true)

            .Selection(s=>
            s.Mode(SelectionMode.Multiple)
            .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)

            )
            .ShowBorders(true)
            .ColumnAutoWidth(true)
                    .ElementAttr("class", "content-block")

            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption("Permission");

            })
    )


    <br />

    @(Html.DevExtreme().TreeList()
            .ID("treeList")
            /*
    .DataSource(d => d.Mvc()
        .Controller("Enterprise")
        .LoadParams(new { userID = ID })
        .LoadAction("Get")
        .Key("AutoKey")
        //.UpdateAction("UpdateCat")
        //.UpdateMethod("POST")
    ).
            */
            .KeyExpr("AutoKey")
    //    .OnRowUpdated("rowUpdated")
    .SelectedRowKeys(new[] { 1 })
    .SearchPanel(s=>s
                        .Visible(true)
                        .Placeholder("Search")
                        .SearchVisibleColumnsOnly(true)
                )
                .ParentIdExpr("FatherAutoKey")
                .ExpandedRowKeys(new[] { 1 })
                .ShowRowLines(true)
                .ShowBorders(true)
                .ElementAttr("class", "content-block")
                    .Editing(editing =>
                    {
                        editing.Mode(GridEditMode.Cell);
                        editing.AllowUpdating(true);
                    })
                .ColumnAutoWidth(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("Name")
                        .AllowEditing(false)
                        .Caption("Category Name");

                    columns.Add().DataField("CanView")
                        .Caption("Can View")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanEdit")
                        .Caption("Can Edit")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanDelete")
                        .Caption("Can Delete")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanAdd")
                       .Caption("Can Add")
                       .AllowEditing(true)
                       .DataType(GridColumnDataType.Boolean);

                })
                .OnRowUpdated("rowUpdated")
            )
    @(Html.DevExtreme().Button()
        .Icon("save")
        .Text("Save")
        .OnClick("save")
        .ElementAttr("class", "content-block")

    )
</div>



<script>
    var permissions;
    var roles;
    @*
    function permissionsChanged(e) {

        let result = $('#permissionsList').dxDataGrid('instance').getSelectedRowsData().map(a => a.Name);

        var canManage = result.includes('Manage Categories');

          const xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    $("#treeList").dxTreeList('instance').refresh();
                }
            }

        xhr.open("POST", 'api/Enterprise/SetAll', true);

            const fd = new FormData();

            fd.append('userID', '@ID');
            fd.append('value', canManage);
            xhr.send(fd);
        @*$("#treeList").dxTreeList({
            columns: [

                {
                dataField: "Name",
                caption: "Category Name",
                allowEditing: true
                },

                {
                dataField: "CanView",
                    caption: "Can View",
                allowEditing: true
                },

                {
                    dataField: "CanEdit",
                    caption: "Can Edit",
                    allowEditing: canManage
                },

                {
                    dataField: "CanDelete",
                    caption: "Can Delete",
                    allowEditing: canManage
                }
            ]
        });


            columns.Add().DataField("Name")
                        .AllowEditing(false)
                        .Caption("Category Name");

                    columns.Add().DataField("CanView")
                        .Caption("Can View")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanEdit")
                        .Caption("Can Edit")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanDelete")
                        .Caption("Can Delete")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);


    }*@

    function rowUpdated(e) {
        console.log(e);
    }



    $(document).ready(function () {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Permissions/UserPermissions?userID=@ID", false);
        xmlHttp.send 

        permissions = JSON.parse(xmlHttp.responseText);

        //$("#permissionsList").dxDataGrid("instance").option("value", permissions);
        $('#permissionsList').dxDataGrid('instance').selectRows(permissions.map(a => a.AutoKey), false)

        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Permissions/GetUserRoles?userID=@ID", false);
        xmlHttp.send();

        roles = JSON.parse(xmlHttp.responseText);

        $('#rolesList').dxDataGrid('instance').selectRows(roles.map(a => a.AutoKey), false)

        /*
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Enterprise?userID=", false);
        xmlHttp.send();

        var res = JSON.parse(xmlHttp.responseText);

        var viewerdataSource = new DevExpress.data.DataSource({
            store: viewerstore,
            pageSize: 5,
            paginate: true
        });
        */


        $('#treeList').dxTreeList({
            dataSource: DevExpress.data.AspNet.createStore({
                key: "AutoKey",
                loadUrl: "api/Enterprise?userID=@ID",
                updateUrl: "api/Enterprise/UpdateCat?userID=@ID",
            })
        });
    });

    function save() {

        permissions = $('#permissionsList').dxDataGrid('instance').getSelectedRowsData();
        roles = $('#rolesList').dxDataGrid('instance').getSelectedRowsData();

                        const xhr = new XMLHttpRequest();


            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var t = this.responseText;
                    var obj = JSON.parse(t);

                    var statusCode = obj.StatusCode;
                    if (statusCode == 0) {
                      window.location = "Settings";
                    }
              }
            }

        xhr.open("POST", 'api/Permissions/Save', true);

        console.log(JSON.stringify(roles));
            const fd = new FormData();

            fd.append('userID', '@ID');
        fd.append('permissionsJson', JSON.stringify(permissions));
        fd.append('rolesJson', JSON.stringify(roles));
            xhr.send(fd);
        }
</script>