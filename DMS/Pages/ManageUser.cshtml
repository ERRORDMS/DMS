@page
@model DMS.Pages.ManageUserModel
@{

    Layout = "~/Pages/_Layout.cshtml";


    Microsoft.Extensions.Primitives.StringValues queryVal;


    string EncryptedString = "";


    if (Request.Query.TryGetValue("f", out queryVal))
    {
        EncryptedString = queryVal.FirstOrDefault();
    }



    string ID = "";

    if (!string.IsNullOrEmpty(EncryptedString))
    {
        ID = Convert.ToString(DMS.Models.StringCipher.Decrypt(EncryptedString).Split("|")[1]);
    }


    if (ID == "")
    {
        <script>
            window.location = 'Dashboard';
        </script>
    }
}


<div style="margin-left:120px;margin-right:310px;margin-top:100px">
    <h2 class="content-block">Roles</h2>
    @(Html.DevExtreme().DataGrid()
        .ID("rolesList")

.DataSource(d => d.Mvc()
    .Controller("api/Permissions")
    .LoadMethod("GET")
    .LoadAction("Roles")
    .Key("AutoKey")
).KeyExpr("AutoKey")

//.OnSelectionChanged("permissionsChanged")
            .ShowRowLines(true)

            .Selection(s=>
            s.Mode(SelectionMode.Multiple)
            .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)

            )
            .ShowBorders(true)
            .ColumnAutoWidth(true)
                    .ElementAttr("class", "content-block")

            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption("Role");

            })
    )


    <br />
    <h2 class="content-block">Permissions</h2>
    @(Html.DevExtreme().DataGrid()
        .ID("permissionsList")

.DataSource(d => d.Mvc()
    .Controller("api/Permissions")
    .LoadMethod("GET")
    .LoadAction("Permissions")
    .Key("AutoKey")
).KeyExpr("AutoKey")

//.OnSelectionChanged("permissionsChanged")
            .ShowRowLines(true)

            .Selection(s=>
            s.Mode(SelectionMode.Multiple)
            .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always)

            )
            .ShowBorders(true)
            .ColumnAutoWidth(true)
                    .ElementAttr("class", "content-block")

            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption("Permission");

            })
    )

    <br />
    @(Html.DevExtreme().Button()
        .Icon("save")
        .Text("Save")
        .OnClick("save")
        .ElementAttr("class", "content-block")

    )

    <br />

    @(Html.DevExtreme().TreeList()
            .ID("treeList")
            /*
    .DataSource(d => d.Mvc()
        .Controller("Enterprise")
        .LoadParams(new { userID = ID })
        .LoadAction("Get")
        .Key("AutoKey")
        //.UpdateAction("UpdateCat")
        //.UpdateMethod("POST")
    ).
            */
            .KeyExpr("AutoKey")
    //    .OnRowUpdated("rowUpdated")
    .SelectedRowKeys(new[] { 1 })
    .SearchPanel(s=>s
                        .Visible(true)
                        .Placeholder("Search")
                        .SearchVisibleColumnsOnly(true)
                )
                .ParentIdExpr("FatherAutoKey")
                .ExpandedRowKeys(new[] { 1 })
                .ShowRowLines(true)
                .ShowBorders(true)
                .ElementAttr("class", "content-block")
                    .Editing(editing =>
                    {
                        editing.Mode(GridEditMode.Batch);
                        editing.AllowUpdating(true);
                    })
                .ColumnAutoWidth(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("Name")
                        .AllowEditing(false)
                        .Caption("Category Name");

                    columns.Add().DataField("CanView")
                        .Caption("Can View")

                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanEdit")
                        .Caption("Can Edit")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanDelete")
                        .Caption("Can Delete")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanAdd")
                       .Caption("Can Add")
                       .AllowEditing(true)
                       .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanDownload")
                     .Caption("Can Download")
                     .AllowEditing(true)
                     .DataType(GridColumnDataType.Boolean);


                })
                .OnToolbarPreparing("toolbar_preparing")
                .OnRowUpdated("rowUpdated")
            )
    <br />

    <br />
    <br />
    <h2 class="content-block">Change Password</h2>
    @(Html.DevExtreme().TextBox()
        .Name("txtPassword")
        .ElementAttr("class", "content-block")
        .Mode(TextBoxMode.Password)
        .Placeholder("New Password"))
    <br />

    @(Html.DevExtreme().Button()
        .Icon("save")
        .Text("Change Password")
        .OnClick("changePassword")
        .ElementAttr("class", "content-block")

    ) 
    <br />

    <br />
    <br />

</div>



<script>
    var permissions;
    var roles;
    @*
    function permissionsChanged(e) {

        let result = $('#permissionsList').dxDataGrid('instance').getSelectedRowsData().map(a => a.Name);

        var canManage = result.includes('Manage Categories');

          const xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    $("#treeList").dxTreeList('instance').refresh();
                }
            }

        xhr.open("POST", 'api/Enterprise/SetAll', true);

            const fd = new FormData();

            fd.append('userID', '@ID');
            fd.append('value', canManage);
            xhr.send(fd);
        @*$("#treeList").dxTreeList({
            columns: [

                {
                dataField: "Name",
                caption: "Category Name",
                allowEditing: true
                },

                {
                dataField: "CanView",
                    caption: "Can View",
                allowEditing: true
                },

                {
                    dataField: "CanEdit",
                    caption: "Can Edit",
                    allowEditing: canManage
                },

                {
                    dataField: "CanDelete",
                    caption: "Can Delete",
                    allowEditing: canManage
                }
            ]
        });


            columns.Add().DataField("Name")
                        .AllowEditing(false)
                        .Caption("Category Name");

                    columns.Add().DataField("CanView")
                        .Caption("Can View")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanEdit")
                        .Caption("Can Edit")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);

                    columns.Add().DataField("CanDelete")
                        .Caption("Can Delete")
                        .AllowEditing(true)
                        .DataType(GridColumnDataType.Boolean);


    }*@

    function rowUpdated(e) {
        console.log(e);
    }
    function toolbar_preparing(e) {
        var treeList = e.component;

        e.toolbarOptions.items.unshift({

            location: "before",
            widget: "dxButton",
            options: {
                text: "Select All",
                width: 136,
                onClick: function (e) {

                    var selecting = e.component.option("text") === "Select All";

                    e.component.option("text", selecting ? "Unselect All" : "Select All");

                       const xhr = new XMLHttpRequest();

                        xhr.onreadystatechange = function () {
                            if (this.readyState == 4 && this.status == 200) {
                                $("#treeList").dxTreeList('instance').refresh();
                            }
                        }

                        xhr.open("POST", 'api/Enterprise/SetAll', true);

                        const fd = new FormData();
                        fd.append('userID', '@ID');

                        fd.append('value', selecting);

                        xhr.send(fd);

                }
            }
        }, {
            location: "after",
            widget: "dxButton",
            options: {
                icon: "refresh",
                onClick: function () {
                    treeList.refresh();
                }
            }
        });
    }


    $(document).ready(function () {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Permissions/UserPermissions?userID=@ID", false);
        xmlHttp.send();

        permissions = JSON.parse(xmlHttp.responseText);

        //$("#permissionsList").dxDataGrid("instance").option("value", permissions);
        $('#permissionsList').dxDataGrid('instance').selectRows(permissions.map(a => a.AutoKey), false)

        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Permissions/GetUserRoles?userID=@ID", false);
        xmlHttp.send();

        roles = JSON.parse(xmlHttp.responseText);

        $('#rolesList').dxDataGrid('instance').selectRows(roles.map(a => a.AutoKey), false)

        /*
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Enterprise?userID=", false);
        xmlHttp.send();

        var res = JSON.parse(xmlHttp.responseText);

        var viewerdataSource = new DevExpress.data.DataSource({
            store: viewerstore,
            pageSize: 5,
            paginate: true
        });
        */


        $('#treeList').dxTreeList({
            dataSource: DevExpress.data.AspNet.createStore({
                key: "AutoKey",
                loadUrl: "api/Enterprise?userID=@ID",
                updateUrl: "api/Enterprise/UpdateCat?userID=@ID",
            })
        });
    });

    function save() {

        permissions = $('#permissionsList').dxDataGrid('instance').getSelectedRowsData();
        roles = $('#rolesList').dxDataGrid('instance').getSelectedRowsData();

                        const xhr = new XMLHttpRequest();


            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var t = this.responseText;
                    var obj = JSON.parse(t);

                    var statusCode = obj.StatusCode;
                    if (statusCode == 0) {
                      window.location = "Settings";
                    }
              }
            }

        xhr.open("POST", 'api/Permissions/Save', true);

        console.log(JSON.stringify(roles));
            const fd = new FormData();

            fd.append('userID', '@ID');
        fd.append('permissionsJson', JSON.stringify(permissions));
        fd.append('rolesJson', JSON.stringify(roles));
            xhr.send(fd);
    }

    function changePassword() {
          if (txtPassword.value == '') {
            DevExpress.ui.notify({ message: "Please enter the password!", width: 320 }, "error", 2000);
            return;
        }

        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var t = this.responseText;
                    var obj = JSON.parse(t);

                    var statusCode = obj.StatusCode;
                    if (statusCode == 0) {
                        swal("Password has been successfully changed!", {
                            icon: "success",
                        });
                    }
                    else {
                        swal("There was an error changing the password!", {
                            icon: "error",
                        });
                    }
              }
            }

        xhr.open("POST", 'api/Authorization/ChangePass', true);

            const fd = new FormData();

            fd.append('userID', '@ID');
        fd.append('newPassword', txtPassword.value);
            xhr.send(fd);
    }
</script>