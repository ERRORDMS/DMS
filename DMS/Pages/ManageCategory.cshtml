@page
@model DMS.Pages.ManageCategoryModel
@{
    ViewData["Title"] = Localizer["Title"];
    Layout = "~/Pages/_Layout.cshtml";

    long AutoKey = 0;

    AutoKey = Convert.ToInt64(Request.Query["AutoKey"]);


}
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
<!-- Syncfusion Essential JS 2 Styles -->
<link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/material.css" />

<style>
    .Category_found, .server_error, .empty_field {
        display: none;
        margin-left: 2rem;
        color: rgb(250,82,82);
    }

    #header {
        width: 100%;
        height: 100px;
        background: rgb(255,255,255);
        z-index: 2000;
        box-shadow: 0px 2px 5px black;
    }
    /*
    .title2 {
        margin: 0;
        padding: 0;
        font-size: 22px;
    }
        */
    #addCatDiv {
        text-align: center;
    }

    #treeList {
        height: 45vh;
    }

    .already_exists {
        color: rgb(250,82,82);
        margin-left: 2rem;
        display: none;
    }

    .form_category {
        display: flex;
        align-items: center;
    }

    #devextreme0 {
        margin: 0;
    }

    .space {
        margin-left: 2rem;
    }

    .category_input {
        width: 360px;
        margin-right: 1rem;
    }

    .add_Category_button:hover {
        box-shadow: 1px 1px 4px black;
    }

    .add_Category_button {
        width: 360px;
        height: 50px;
        border-radius: 15px;
        outline: none;
        border: none;
        background-image: linear-gradient(to right, rgb(255,87,34), rgb(255,92,38), rgb(255,114,45));
        background-size: 200%;
        font-size: 1.2rem;
        color: #fff;
        font-family: 'Poppins', sans-serif;
        text-transform: uppercase;
        margin: 1rem 0;
        cursor: pointer;
        transition: .5s;
    }
</style>
<!-- Syncfusion Essential JS 2 Scripts -->
<script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js"></script>



@if (AutoKey != 0)
{
    <div class="empty_field">
        @Localizer["MissingArgs"]
    </div>
    <div class="server_error">
        @Localizer["InternalError"]
    </div>
    <div class="already_exists">
        @Localizer["Exists"]
    </div>
    @*  <div class="addCategory_form_bar">
            <div class="addCategory_form">
                @(Html.DevExtreme().TextBox()

                    .Placeholder(Localizer["CategoryNameCol"].Value)
                            .ElementAttr("class", "content-block")
                            .Name("txtName")
        )
                @(Html.DevExtreme().Button()
            .Icon("save")
            .Text(Localizer["Save"].Value)
            .OnClick("saveCat")
            .ElementAttr("class", "content-block")

        )
                @(Html.DevExtreme().Button()
            .Icon("trash")
            .Text(Localizer["DeleteCat"].Value)
            .OnClick("deleteCat")
            .ElementAttr("class", "content-block")
            .ID("delete_button")

        )
            </div>
        </div>*@

    <div class="content-block">
        <h2>@Localizer["ManageCategory"]</h2>

        @(Html.DevExtreme().TextBox()
                .Placeholder(Localizer["CategoryNameCol"].Value)
                        .Name("txtName")
                        //.ID("txtName")
    )
        <br />

        @(Html.DevExtreme().Button()
        .Icon("save")

        .Text(Localizer["Save"].Value)
        .OnClick("saveCat")

    )
        @(Html.DevExtreme().Button()
        .ID("delete_button")
        .Icon("trash")

        .Text(Localizer["DeleteCat"].Value)
        .OnClick("deleteCat")
        )
    </div>

    <script>
        var isEnterprise;
        $(document).ready(function () {
            $('#txtName').val(getVal());
            $('#txtName').focus();
            $('#txtName').blur();

            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", "api/Enterprise/IsEnterprise", false);
            xmlHttp.send();

            isEnterprise = JSON.parse(xmlHttp.responseText);

            if (isEnterprise == true) {
                const xhr = new XMLHttpRequest();

                xhr.open("GET", "api/categories/CanDelete?AutoKey=" + @AutoKey, false);
                xhr.send();
                var s = JSON.parse(xhr.responseText);

                if (s == true) {
                    $("#delete_button").fadeIn(200);
                } else if (s == false) {
                    $("#delete_button").fadeOut(200);
                } else {
                    $("#delete_button").fadeIn(200);
                }
            }
        });

        function getVal()
        {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", "api/Categories/Name?AutoKey=" + @AutoKey, false );
            xmlHttp.send();
            return xmlHttp.responseText;
        }

        function saveCat() {
            $(document).ready(function () {
                $(".content-block").click(function () {
                    window.onkeyup = function () {
                        $('.empty_field').fadeOut(0);
                        $(".already_exists").fadeOut(100);
                    }
                })
            });
            if (txtName.value == '') {
                $(document).ready(function () {
                    $('.empty_field').fadeIn(100)
                })
                return;
            } else {
                $('.empty_field').fadeOut(0)

            }
               const xhr = new XMLHttpRequest();

                xhr.onreadystatechange = function () {
                    if (this.readyState == 4 && this.status == 200) {
                        var t = this.responseText;
                        var obj = JSON.parse(t);

                        var statusCode = obj.StatusCode;
                        if (statusCode == 0) {
                            window.location = "ManageCategory";
                        }
                        if (statusCode == 105) {
                            $(".already_exists").fadeIn(100);
                        } else {
                            $(".already_exists").fadeOut(100);
                        }
                    }
                }


                xhr.open("POST", 'api/Categories/Save', true);

                const fd = new FormData();

                fd.append('AutoKey', @AutoKey);
                fd.append('Name', txtName.value);
                xhr.send(fd);

        }


        function deleteCat() {
            const xhr = new XMLHttpRequest();
            xhr.open("GET", "api/Categories/CanDelete", false);
            xhr.send();
            let s = JSON.parse(xhr.responseText);

            if (s == true || !isEnterprise) {
                  xhr.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                           window.location = "Index";
                         }
                    }

        xhr.open("POST", 'api/Categories/Delete', true);

            const fd = new FormData();

            fd.append('AutoKey', @AutoKey);
            xhr.send(fd);

            } else {
                alert("you can't delete")
            }

        }

    </script>


}
else
{
    <div class="empty_field">
        @Localizer["MissingArgs"]
    </div>
    <div class="server_error">
        @Localizer["InternalError"]
    </div>
    <div class="already_exists">
        @Localizer["Exists"]
    </div>
    <div id="header">
        <h2 class="content-block" style="font-size:22px;margin:0;margin-left:2rem;">@Localizer["ManageCategory"]</h2>
        <div id="addCatDiv" class="content-block">
            <div class="form_category">

                @(Html.DevExtreme().TextBox()
                    .Mode(TextBoxMode.Text)
                    .Name("CategoryName")
                    .Placeholder(Localizer["CategoryNameCol"].Value)
                    .ElementAttr("class", "content-block category_input")
                    .HoverStateEnabled(true)
            )
                <span class="space"></span>
                @(Html.DevExtreme().Button()
        .Icon("plus")
        .Text(Localizer["AddCategory"].Value)
        .OnClick("addCategory")

    )
            </div>
        </div>
    </div>
    <br />
    <br />
    <br />
    @(Html.DevExtreme().TreeList()
        .ID("treeList")
/*
.DataSource(d => d.Mvc()
    .Controller("Categories")
    .LoadAction("Get")
    .Key("AutoKey")
)*/
.KeyExpr("AutoKey")
            .ParentIdExpr("FatherAutoKey")
            .ExpandedRowKeys(new[] { 1 })
            .ShowRowLines(true)

            .OnSelectionChanged("onValueChangedTree")
            .ShowBorders(true)
            .SearchPanel(s=>s
                    .Visible(true)
                    .Placeholder("Search")
                    .SearchVisibleColumnsOnly(true)
            )
            .Selection(s=>s
                    .Mode(SelectionMode.Single)
            )
            .ColumnAutoWidth(true)
                    .RowDragging(rd => rd
                        .AllowDropInsideItem(true)
                        .AllowReordering(true)
                        .OnDragChange("onDragChange")
                        .OnReorder("onReorder")
                        .ShowDragIcons(true)
                    )
                    .ElementAttr("class", "content-block")

            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption(Localizer["CategoryNameCol"].Value);
                columns.Add()
               .Caption(Localizer["Manage"].Value)
               .Width(100)
               .Alignment(HorizontalAlignment.Center)
               .AllowFiltering(false)
               .AllowSorting(false)
               .CellTemplate(new JS("cellTemplate"));


            })
    )
}

<script>
    var categories;
    var isEnterprise;
    //<![CDATA[
    function cellTemplate(element, cellInfo) {
            $('<a/>')
                .text('@Localizer["Manage"]')
                .click(function () {
                    onEdit(element, cellInfo);
                })
                .appendTo(element);
    }

    function onEdit(element, cellinfo) {
        var autokey = cellinfo.data.AutoKey;

        if (isEnterprise == true) {
            for (var i = 0; i < categories.length; i++) {
                if (autokey == categories[i].AutoKey && (categories[i].CanEdit == true || categories[i].CanDelete == true)) {
                    window.location.href = 'ManageCategory?AutoKey=' + autokey;
                }
            }
        } else {
            window.location.href = 'ManageCategory?AutoKey=' + autokey;
        }
    }

    var permissions;

    $(document).ready(function () {

        var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", "api/Categories/", false );
        xmlHttp.send();


        categories = JSON.parse(xmlHttp.responseText).data;


        $("#treeList").dxTreeList({
            dataSource: categories,
        });

        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Enterprise/IsEnterprise", false);
        xmlHttp.send();

        isEnterprise = JSON.parse(xmlHttp.responseText);

        
        if (isEnterprise) {
            // Get user permissions

            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", "api/Permissions/UserPermissions", false);
            xmlHttp.send();

            var result = JSON.parse(xmlHttp.responseText);

            permissions = result.map(a => a.Name);

        }

    });

    function onDragChange(e) {
            var treeList = e.component,
                visibleRows = treeList.getVisibleRows(),
                sourceNode = treeList.getNodeByKey(e.itemData.AutoKey),
                targetNode = visibleRows[e.toIndex].node;

            while (targetNode && targetNode.data) {
                if (targetNode.data.AutoKey === sourceNode.data.AutoKey) {
                    e.cancel = true;
                    break;
                }
                targetNode = targetNode.parent;
            }
    }

    function onReorder(e) {

        if (isEnterprise == false || e.itemData.CanEdit) {
            var treeList = e.component,
                visibleRows = treeList.getVisibleRows(),
                sourceData = e.itemData,
                targetData = visibleRows[e.toIndex].data;

            if (e.dropInsideItem) {
                e.itemData.FatherAutoKey = targetData.AutoKey;
            } else {
                var sourceIndex = categories.indexOf(sourceData),
                    targetIndex = categories.indexOf(targetData);

                if (sourceData.FatherAutoKey !== targetData.FatherAutoKey) {
                    sourceData.FatherAutoKey = targetData.FatherAutoKey;
                    if (e.toIndex > e.fromIndex) {
                        targetIndex++;
                    }
                }

                categories.splice(sourceIndex, 1);
                categories.splice(targetIndex, 0, sourceData);
            }

            const xhr = new XMLHttpRequest();


            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {

                }
            }

            xhr.open("POST", 'api/Categories/SetParent', true);

            const fd = new FormData();

            fd.append('AutoKey', sourceData.AutoKey);
            fd.append('FatherAutoKey', sourceData.FatherAutoKey);
            xhr.send(fd);

            $("#treeList").dxTreeList({
                dataSource: categories,
            });
        } else {
            alert("You can't edit");
        }


        //treeList.refresh();
    }

    var selectedID = 0;
    function onValueChangedTree(e) {
        selectedID = e.selectedRowKeys[0];

        //$("#gridContainer").dxDataGrid({
        //   dataSource: "api/Upload/GetDocuments?CatID=" + selectedID,
        // });


    }
    function addCategory() {

        if (isEnterprise) {
            if (selectedID != null && selectedID != '') {

                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open("GET", "api/Categories/CanAdd", false);
                xmlHttp.send();

                var canAdd = JSON.parse(xmlHttp.responseText);


                if (!canAdd) {
                    alert("You can't add to this category!");
                    return;
                }
            } else {
                if (!permissions.includes('Can Add Root Category')) {
                    alert("You can't add to root!");
                    return;
                }
            }
        }
        

        $(document).ready(function () {
            $('.category_input').click(function () {
                window.onkeyup = function () {
                    $('.Category_found,.empty_field').fadeOut(200);
                }
            })
        });
        if (CategoryName.value == "") {
            $(document).ready(function () {
                $(".empty_field").fadeIn(100)
            })
            return;
        } else {
            $(document).ready(function () {
                $(".empty_field").fadeOut(0)
            })
            const xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var t = this.response;
                    console.log(this.response);
                    var obj = JSON.parse(t);
                    var statusCode = obj.StatusCode;

                    if (statusCode == 0) {
                        $(document).ready(function () {
                            $('.Category_found').fadeOut(0, function () {
                                $(".server_error").fadeOut(0)
                            });
                        })
                        //  window.location = '/';
                       // $("#treeList").dxTreeList("instance").refresh();
                        var xmlHttp = new XMLHttpRequest();
                        xmlHttp.open("GET", "api/Categories/", false);
                        xmlHttp.send();

                        categories = JSON.parse(xmlHttp.responseText).data;

                        $("#treeList").dxTreeList({
                            dataSource: categories,
                        });
                        $('#CategoryName').val("");
                        $('#CategoryName').focus();
                        $('#CategoryName').blur();
                    }
                    if (statusCode == 103) {
                        $(document).ready(function () {
                            $(".server_error").fadeIn(100)
                        })
                    } else {
                        $(".server_error").fadeOut(100)
                    }
                    if (statusCode == 105) {
                        $('.Category_found').fadeIn(100);
                    } else {
                        $('.Category_found').fadeOut(100)
                    }
                }
            }
            var category = CategoryName.value;
            const fd = new FormData();
            fd.append("Name", category);
            fd.append("FatherAutoKey", selectedID);
            xhr.open("post", "api/Categories/addCategory", true);
            xhr.send(fd);
        }
    }

</script>

