@using GleamTech.AspNet.Core
@using GleamTech.DocumentUltimate
@using GleamTech.DocumentUltimate.AspNet
@using GleamTech.DocumentUltimate.AspNet.UI
@using Aspose.Imaging
@using Aspose.Imaging.ImageOptions; 
@{

    string DecryptedString = (string)ViewData["DecryptedString"];

    string userId = DecryptedString.Split("|")[0];

    long InfoAutoKey = Convert.ToInt64(DecryptedString.Split("|")[1]);
    long LineAutoKey = Convert.ToInt64(DecryptedString.Split("|")[2]);

        
    var dm = new DMS.Database.DataManager(userId);
    var Ext = dm.GetExt(InfoAutoKey);
    var fn = dm.GetActualFileName(InfoAutoKey, Ext);

    var arr = dm.GetFile(InfoAutoKey, LineAutoKey, Ext);
    var helper = dm.SQLHelper;
    DocumentViewerPermissions deniedPermissions = DocumentViewerPermissions.None;

    bool canDownload = true;
    if(DecryptedString.Split("|").Length > 3 && new DMS.Database.DataManager(null).IsEnterpriseSubUser(userId))
    {
        string CatID = DecryptedString.Split("|")[3];

        if (CatID == "undefined")
        {
            CatID = helper.ExecuteScalar<string>("select top 1 CatAutoKey from DocumentCatRel where DocumentAutoKey = '" + InfoAutoKey + "'");
        }

        canDownload = helper.ExecuteScalar<bool>("select TOP 1 CanDownload from " + DMS.Database.Tables.UserCategories + " where UserID = '" + userId + "' and CatID = '" + CatID + "'");

        if (!canDownload)
        {
            deniedPermissions = DocumentViewerPermissions.Download | DocumentViewerPermissions.DownloadAsPdf | DocumentViewerPermissions.Print | DocumentViewerPermissions.SelectText;
        }
    }

    string[] supportedExtensions = new string[]
 {
        "pdf", "xps","oxps","xpz","docx","docm","dotx","dotm","doc","dot","rtf","odt","ott",
        "xlsx","xlsm","xltx","xltm","xlam","xlsb","xls","xlt","csv","tsv","dif","ods","ots",
        "pptx","pptm","potx","potm","ppsx","ppsm","ppt","pps","odp","otp","vsdx","vsdm","vstx",
        "vstm","vssx","vssm","vdx","vsx","vtx","vsd","vss","vst","vdw","mpp",
        "mpt","mpx","msg","eml","emix","epub","html","htm","mht","mhtml","web","txt","xml",
        "tif","tiff","djvu","dcm","ps","svg","emf","psd","jpg","jpeg","jpe","jfif","jp2","jpf","jpx",
        "j2k","j2c","jpc","jxr","wdp","hdp", "png","gif","webp","bmp","wmf","dib"
 };


//    DocumentInfo documentInfo = new DocumentInfo(fn);
    if (!supportedExtensions.Contains(Ext))
    {

        if (Ext == "cdr")
        {
            using (var image = (VectorMultipageImage)Image.Load(new System.IO.MemoryStream(arr)))
            {
                // Create page rasterization options
                var pageOptions = dm.CreatePageOptions<CdrRasterizationOptions>(image);

                // Create PDF options
                var options = new PdfOptions { MultiPageOptions = new MultiPageOptions { PageRasterizationOptions = pageOptions } };

                // Export image to PDF format
                System.IO.MemoryStream ms = new System.IO.MemoryStream();
                image.Save(ms, options);

                arr = ms.ToArray();

            }
        }
      //  documentInfo = new DocumentInfo(fn, format: DocumentFormat.Pdf);

    }

    GleamTech.FileProviders.StreamFileProvider provider = new GleamTech.FileProviders.StreamFileProvider(LineAutoKey  + "_" + fn, new System.IO.MemoryStream(arr));

    
    var documentViewer = new DocumentViewer
    {
        //Width = GleamTech.AspNet.UI.CssLength.Percentage(100),
        //Height = GleamTech.AspNet.UI.CssLength.Percentage(100),
        // DisplayMode = GleamTech.AspNet.UI.DisplayMode.Viewport,
        ClientEvents = new DocumentViewerClientEvents() {  Failed="onFailed", Downloading = "onDownload"},
        DeniedPermissions = deniedPermissions,
        Document = provider
        
         
     //   DocumentSource = new DocumentSource(documentInfo, arr)
    };


}

    <html>
    <head>
        <title>Document Viewer</title>
        @this.RenderHead(documentViewer)



    </head>
    <body>
        <div id="documentViewerDiv">
            @this.RenderBody(documentViewer)
        </div>

        <div id="cantOpen" style="vertical-align:middle;text-align:center">
            <h2>This file cannot be viewed.</h2>
            @(Html.DevExtreme().Button()
            .Text("Download")
            .Type(ButtonType.Normal)
            .Visible(canDownload)
            .OnClick("download")
            )
            <h2 id="downloadingWait">Please wait, downloading...</h2>

        </div>

        <script>
            $(document).ready(() => {
                $('#cantOpen').hide();
                $('#downloadingWait').hide();

            });

            function onDownload(e) {
                
                console.log("onDownload");
                
            }
            function onFailed() {
                console.log("Failed");
                $('#documentViewerDiv').fadeOut(200);
                $('#cantOpen').fadeIn(200);
            }

            function download() {
                if ('@canDownload' == 'True') {
                    $('#downloadingWait').fadeIn(200);

                    var xmlHttp = new XMLHttpRequest();
                    xmlHttp.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {

                var str = this.responseText;

                    var arr = base64ToArrayBuffer(str);
                            saveByteArray('@fn' , arr);
                        }
                        }

                xmlHttp.open("GET", "api/Upload/Getfile?InfoAutoKey=@InfoAutoKey" + "&LineAutoKey=@LineAutoKey" + "&Ext=@Ext", true);
                xmlHttp.send();

                }
            }

            function base64ToArrayBuffer(base64) {
                var binaryString = window.atob(base64);
                var binaryLen = binaryString.length;
                var bytes = new Uint8Array(binaryLen);
                for (var i = 0; i < binaryLen; i++) {
                    var ascii = binaryString.charCodeAt(i);
                    bytes[i] = ascii;
                }
                return bytes;
            }

            function saveByteArray(reportName, byte) {
                
                var blob = new Blob([byte], { type: '@MimeKit.MimeTypes.GetMimeType(LineAutoKey + "." + Ext)' });
                var link = document.createElement('a');
                link.href = window.URL.createObjectURL(blob);
                var fileName = reportName;
                link.download = fileName;
                link.click();
            };
            function getUrl() {
                  var base_url = window.location.origin;


                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open("GET", "api/Upload/GetEncryptedString?key=" + @InfoAutoKey + "|" + @LineAutoKey, false);
                xmlHttp.send();

                var str = xmlHttp.responseText;

                var url = base_url + '/Share?f=' + str;

                return url;
            }
            function copyLink(e) {


                var url = getUrl();
                var input = document.getElementById('copyInput');
                input.value = url;

                input.focus();
                input.select();

                try {
                    document.execCommand('copy');
                    DevExpress.ui.notify({ message: 'Link was copied to clipboard', width: 320 }, "success", 2000);

                } catch (err) {
                    DevExpress.ui.notify({ message: 'Unable to copy link', width: 320 }, "error", 2000);
                }
            }

            function share() {
                $("#shareModal").dxPopup("instance").show();
            }
            function shareOnFacebook() {
                FB.ui(
                    {
                        method: 'feed',
                        name: 'Share file',
                        link: getUrl(),
                        caption: 'Enter text here',
                        description: "Enter description here",
                        message: ""
                    });
            }


            window.fbAsyncInit = function () {
                FB.init({
                    appId: '345399346816803',
                    autoLogAppEvents: false,
                    xfbml: true,
                    version: 'v8.0'
                });
            };
        </script>
        <script async defer crossorigin="anonymous" src="https://connect.facebook.net/en_US/sdk.js"></script>

    </body>
</html>
