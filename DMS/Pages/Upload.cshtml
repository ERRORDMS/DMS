@page
@model DMS.Pages.UploadModel
@{
    ViewData["Title"] = "Upload";
    Layout = "~/Pages/_Layout.cshtml";
}

    <style>
        .maindiv {
            /* font-family: 'Roboto';
            font-weight: 100;*/
            width: 100%;
            margin-left: 120px;
            margin-right: 310px;
            margin-top: 100px;
            text-align: center;
        }


        header {
            margin-top: 2rem;
            font-size: 32px;
        }
            /*
        #progressBar {
            height: 20px;
            width: 450px;
            border: 2px solid darkblue;
        }
        .progress-bar {
            height: 20px;
            width: 450px;
            border: 2px solid darkblue;
        }

        .progress-bar-fill {
            height: 100%;
            width: 0%;
            background-color: lightblue;
            display: flex;
            align-items: center;
            transition: width 0.25s;
        }

        .progress-bar-text {
            margin-left: 10px;
            font-weight: bold;
        }
            */
            .note {
                font-size: 10pt;
                color: #484848;
                margin-left: 9px;
            }

                .note > span {
                    font-weight: 700
                }
            /*
            .main-block {
                max-width: 900px;
                min-width: 700px;
                margin-left: 5rem;
            }
                    */
            .buttons {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            .files_div {
                overflow: auto;
                width: 70%;
                margin-left: 3rem;
            }

            .select_button {
                margin-left: 3rem;
            }

            .dx-fileuploader-files-container {
                overflow: auto;
            }

            .upload_button {
                margin-right: 3rem;
            }



            .tabpanel-item {
                height: 200px;
                -webkit-touch-callout: none;
                -webkit-user-select: none;
                -moz-user-select: none;
                -ms-user-select: none;
                user-select: none;
                padding-left: 25px;
                padding-top: 55px;
            }

            .mobile .tabpanel-item {
                padding-top: 10px;
            }

            .tabpanel-item > div {
                float: left;
                padding: 0 85px 10px 10px
            }

            .tabpanel-item p {
                font-size: 16px;
                margin: 0;
            }

            .item-box {
                font-size: 16px;
                margin: 15px 0 45px 10px;
            }

            .options {
                padding: 20px;
                background-color: rgba(191, 191, 191, 0.15);
                margin-top: 20px;
            }

            .caption {
                font-size: 18px;
                font-weight: 500;
            }

            .option {
                margin-top: 10px;
            }

            .productsDataSource {
                width: 360px;
            }

            .aligneach {
                vertical-align: top;
                max-width: 49%;
                min-width: 300px;
                display: inline-block;
            }

            .datagrid {
                height: 50vh;
            }
    </style>

<!-- Syncfusion Essential JS 2 Styles -->
<link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/material.css" />

<!-- Syncfusion Essential JS 2 Scripts -->
<script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js"></script>


<div class="maindiv main-block">

    <form id="form" action="javascript:upload()" method="post" enctype="multipart/form-data">
        <header>Upload</header>
        <br />


        @{
            var asyncSettings = new Syncfusion.EJ2.Inputs.UploaderAsyncSettings { SaveUrl = "api/Upload/Save", RemoveUrl = "api/Upload/Remove", ChunkSize = Int32.MaxValue };
        }
        <ejs-uploader success="onUploadSuccess" data-required-message="* Choose your image to upload" required data-msg-containerid="uploadError" id="uploadFiles" beforeUpload="onBeforeUpload" uploading="onFileUpload" maxFileSize="@Int32.MaxValue" asyncSettings="@asyncSettings" autoUpload="false"></ejs-uploader>
        <br />

        @(Html.DevExtreme().TextArea()
                    .ID("txtNote")
                    .ElementAttr("class", "content-block")
                    .Placeholder("Note")
            )

        <div class="aligneach">

            <h2>Contacts: </h2>
            @(Html.DevExtreme().DataGrid()
            .ID("contactsList")
            .Editing(editing =>
            {
                editing.Mode(GridEditMode.Row);
                editing.AllowAdding(true);
                editing.AllowDeleting(true);
                editing.AllowUpdating(true);
            })
               .DataSource(d => d.Mvc()
               .Controller("Contacts")
               .UpdateAction("UpdateContact")
               .InsertAction("AddContact")
               .DeleteAction("DeleteContact")
               .LoadAction("Get")
               .Key("AutoKey")
               )
               .KeyExpr("AutoKey")
               
            .ElementAttr("class", "datagrid")
           .Selection(s=> s.Mode(SelectionMode.Multiple))
           .OnSelectionChanged("onContactsChanged")
           .SearchPanel(s => s
                    .Visible(true)
                    .Placeholder("Search")
                    .SearchVisibleColumnsOnly(true)
            )
            .ShowRowLines(true)
            .OnToolbarPreparing("toolbarPreparingContacts")
            .ShowBorders(true)
            .ColumnAutoWidth(true)


            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                
                    .Caption("Name");

                columns.Add().DataField("Phone")
                    .Caption("Phone Number");

                columns.Add().DataField("Email")
                    .Caption("Email Address");


            })
        )
            </div>
            <div class="aligneach">

                <h2>Search Keys:</h2>

            @(Html.DevExtreme().DataGrid()
        .ID("searchKeysList")
         .Editing(editing =>
        {
            editing.Mode(GridEditMode.Row);
            editing.AllowAdding(true);
            editing.AllowDeleting(true);
            editing.AllowUpdating(true);
        })
.DataSource(d => d.Mvc()
    .Controller("SearchKeys")
               .UpdateAction("UpdateKey")
           .InsertAction("AddKey")
           .DeleteAction("DeleteKey")
    .LoadAction("Get")
    .Key("AutoKey")
).KeyExpr("AutoKey")
.Selection(S=>S.Mode(SelectionMode.Multiple))
.OnSelectionChanged("onKeysChanged")
           .SearchPanel(s => s
                    .Visible(true)
                    .Placeholder("Search")
                    .SearchVisibleColumnsOnly(true)
            )
           .ElementAttr("class", "datagrid")
            .ShowRowLines(true)
            .OnToolbarPreparing("toolbarPreparingSearchKeys")
            .ShowBorders(true)
            .ColumnAutoWidth(true)

            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption("Name");

            })
        )
        </div>

        <h2 class="content-block">Categories:</h2>
        @(Html.DevExtreme().TreeList()
            .ID("treeList")

    .DataSource(d => d.Mvc()
        .Controller("Categories")
        .LoadAction("Get")
        .Key("AutoKey")
    ).KeyExpr("AutoKey")
    .OnSelectionChanged("onValueChangedTree")
    .SelectedRowKeys(new[] { 1 })
    .SearchPanel(s=>s
                        .Visible(true)
                        .Placeholder("Search")
                        .SearchVisibleColumnsOnly(true)
                )
                .OnContentReady("treeReady")

                .ParentIdExpr("FatherAutoKey")
                .ExpandedRowKeys(new[] { 1 })
                .ShowRowLines(true)
        .Selection(s => s.Mode(SelectionMode.Multiple))
                .ShowBorders(true)
                .ColumnAutoWidth(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("Name")
                        .Caption("Category Name");

                })
            )
    </form>

</div>

<script src="~/js/progressbar.js"></script>
<script>
    var files;
    var categories;
    var keys;
    var contacts;

    function onContactsChanged(e) {
        contacts = e.selectedRowsData;
    }

    function onKeysChanged(e) {
        keys = e.selectedRowsData;
    }

    function onValueChangedTree(e) {
        categories = e.selectedRowsData;

    }

    function treeReady(e) {
        $('#treeList').dxTreeList('instance').deselectAll();
    }

    var isEnterprise;
    var permissons;

    function toolbarPreparingContacts(e) {

        if (isEnterprise) {
            if (!permissions.includes('Can Add Contacts')) {
                e.toolbarOptions.items.shift();
            }
        }

    }

    function toolbarPreparingSearchKeys(e) {

        if (isEnterprise) {
            if (!permissions.includes('Can Add Search Keys')) {
                e.toolbarOptions.items.shift();
            }
        }
    }

    $(document).ready(function () {

        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Enterprise/IsEnterprise", false);
        xmlHttp.send();

        isEnterprise = JSON.parse(xmlHttp.responseText);


        if (isEnterprise) {
            // Get user permissions

            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", "api/Permissions/UserPermissions", false);
            xmlHttp.send();

            var result = JSON.parse(xmlHttp.responseText);

            permissions = result.map(a => a.Name);

        }

        $("#contactsList").dxDataGrid({
            editing: {
                mode: "row",
                allowUpdating: function (e) {
                    return isEnterprise == false || permissions.includes('Can Edit Contacts');
                },
                allowDeleting: function (e) {
                    return isEnterprise == false || permissions.includes('Can Edit Contacts');
                },
                allowAdding: function (e) {
                    return isEnterprise == false || permissions.includes('Can Add Contacts');
                },
                useIcons: true
            }
        });

        $("#searchKeysList").dxDataGrid({
            editing: {
                mode: "row",
                allowUpdating: function (e) {
                    return isEnterprise == false || permissions.includes('Can Edit Search Keys');
                },
                allowDeleting: function (e) {
                    return isEnterprise == false || permissions.includes('Can Edit Search Keys');
                },
                allowAdding: function (e) {
                    return isEnterprise == false || permissions.includes('Can Add Search Keys');
                },
                useIcons: true
            }
        });
    });

    function onBeforeUpload(args) {
        var uploadObj = document.getElementById("uploadFiles").ej2_instances[0];
        var files = uploadObj.filesData;
        filesCount = files.length;
        filesUploaded = 0;

        if (categories == null || categories == '') {
            alert('Choose a category!');
            args.cancel = true;
            return;
        }

        contacts = $('#contactsList').dxDataGrid('instance').getSelectedRowsData();
        keys = $('#searchKeysList').dxDataGrid('instance').getSelectedRowsData();

        var allSize = 0;
        for (var i = 0; i < files.length; i++) {
            var fileSizeMB = files[i].size / 1048576.0;

            allSize = allSize + fileSizeMB;
        }


        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/authorization/getuserstorage", false);
        xmlHttp.send();
        var d = xmlHttp.responseText;
        storage = JSON.parse(d);

        if (storage.Storage != -1 && (storage.UsedStorage + allSize) > storage.Storage) {
            alert("You don't have enough space!")
            args.cancel = true;
            return;
        }



    }
    function onFileUpload(args) {   
        
        args.customFormData = [
        {
            'categories': JSON.stringify(categories)
        },
        {
            'contacts': JSON.stringify(contacts)
        },
        {
                'keys': JSON.stringify(keys)
            },
            {
                'note': $('#txtNote').dxTextArea('instance').option("value")
            }
        ];

    }

    var filesUploaded = 0;
    var filesCount = 0;

    function onUploadSuccess(args) {
        if (args.operation === 'upload') {
            filesUploaded = filesUploaded + 1;

            if (filesUploaded == filesCount) {
              window.location = 'Dashboard';
            }
        }
    }

    @*
    function upload() {

        if (categories == null || categories == '') {
            alert('Choose a category!');
            return;
        }

        if (files == null || files.length < 1) {
            alert('Please choose a file!');
            return;
        }

        $(document).ready(function () {
            $("#pleaseWait").fadeIn(100);
            $("#progressBar").fadeIn(100);
        })

        var i = files.length;

        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/authorization/getuserstorage", false);
        xmlHttp.send();
        var d = xmlHttp.responseText;
        storage = JSON.parse(d);

        var bar = new ProgressBar.Line('#progressContainer', {
            strokeWidth: 2,
            easing: 'easeInOut',
            duration: 1400,
            color: '#0087FF',
            trailColor: '#eee',
            trailWidth: 1,
            svgStyle: null
        });
        for (var i = 0; i < files.length; i++) {
            var fileSizeMB = files[i].size / 1048576.0;

            if ((storage.UsedStorage + fileSizeMB) > storage.Storage) {
                alert("You don't have enough space!")
                return;
            }
        }


        /*
        Array.from(files).forEach(file => {
            var fileSizeMB = file.size / 1048576.0;

            if ((storage.UsedStorage + fileSizeMB) > storage.Storage) {
                alert("You don't have enough space!")
                return;
            }


            i--;
            //            progressBarFill.style.width = "0%";
            //          progressBarText.textContent = "0%";
            bar.animate(0);

            const xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (i == 0)
                        window.location = 'Dashboard';
                }
            }
            const fd = new FormData();
            fd.append('photo', file);
            fd.append('categories', JSON.stringify(categories))
            fd.append('contacts', JSON.stringify(contacts));
            fd.append('keys', JSON.stringify(keys));

            xhr.open("POST", "api/upload", true);

            xhr.upload.addEventListener("progress", (e) => {
                const percent = e.lengthComputable ? (e.loaded / e.total) * 100 : 0;
                console.log(percent.toFixed(2) / 100);
                //       progressBarFill.style.width = percent.toFixed(2) + "%";
               //        progressBarText.textContent = percent.toFixed(2) + "%";
                bar.animate(percent.toFixed(2) / 100);
            });

           xhr.send(fd);
        });
        */

        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                if (i == 0)
                    window.location = 'Dashboard';
            }
        }
        const fd = new FormData();
        fd.append('photo', Array.from(files));
        fd.append('categories', JSON.stringify(categories))
        fd.append('contacts', JSON.stringify(contacts));
        fd.append('keys', JSON.stringify(keys));

        xhr.open("POST", "api/upload", true);

        xhr.upload.addEventListener("progress", (e) => {
            const percent = e.lengthComputable ? (e.loaded / e.total) * 100 : 0;
            //       progressBarFill.style.width = percent.toFixed(2) + "%";
            //        progressBarText.textContent = percent.toFixed(2) + "%";
            bar.animate(percent.toFixed(2) / 100);
        });

        xhr.send(fd);
    }
    *@
</script>

<ejs-scripts></ejs-scripts>
