@page
@model DMS.Pages.UploadModel
@{
    ViewData["Title"] = "Upload";
    Layout = "~/Pages/_Layout.cshtml";
}
@*

    <link rel="stylesheet" href="~/css/upload.css">
    <div class="maindiv">
        <header>Upload</header>

        <div class="file-picker">
            <svg class="file-picker__icon" version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
            <g>
            <polygon points="41.3,57.7 42.1,58.5 49.5,51.1 49.5,74.8 50.5,74.8 50.5,51.1 57.9,58.5 58.7,57.7 50,49    " />







            <path d="M71.3,38.2c-0.1,0-0.2,0-0.3,0c-1.1-7.5-7.4-13-15.1-13c-6.5,0-12.3,4.2-14.4,10.3c-1.1-0.3-2.3-0.5-3.4-0.5
                    c-6,0-11.1,4.4-12,10.3c-0.3,0-0.6-0.1-0.9-0.1c-4.7,0-8.6,3.8-8.6,8.6c0,4.7,3.8,8.6,8.6,8.6h10.8v-1.1H25.2
                    c-4.1,0-7.5-3.4-7.5-7.5c0-4.1,3.3-7.5,7.5-7.5c0.4,0,0.8,0,1.3,0.1l0.6,0.1l0.1-0.6c0.6-5.6,5.3-9.9,10.9-9.9
                    c1.2,0,2.4,0.2,3.6,0.6l0.5,0.2l0.2-0.5c1.8-5.9,7.3-10.1,13.5-10.1c7.2,0,13.3,5.4,14,12.6l0.1,0.5l0.5,0c0.2,0,0.5,0,0.7,0
                    c6.1,0,11,4.9,11,11c0,6.1-4.9,11-11,11h-7v1.1h7c6.7,0,12.1-5.4,12.1-12.1C83.3,43.6,77.9,38.2,71.3,38.2z" />







                </g>
              </svg>

            <svg class="file-picker__icon--cancel" version="1.1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
            <path d="M51,50l14.9-15c0.3-0.3,0.3-0.7,0-1c-0.3-0.3-0.7-0.3-1,0L50,49L35.1,34.1c-0.3-0.3-0.7-0.3-1,0c-0.3,0.3-0.3,0.7,0,1L49,50
                  L34.1,65c-0.3,0.3-0.3,0.7,0,1c0.1,0.1,0.3,0.2,0.5,0.2c0.2,0,0.4-0.1,0.5-0.2L50,51l14.9,14.9c0.1,0.1,0.3,0.2,0.5,0.2
                  c0.2,0,0.4-0.1,0.5-0.2c0.3-0.3,0.3-0.7,0-1L51,50z" />







              </svg>

            <div class="file-picker__progress" id="file-picker__progress"></div>

            <form class="file-picker__form dropzone"
                  id="dropzone"
                  method="POST"
                  action="api/Upload" enctype="multipart/form-data">
                <div class="dropzone__fallback hidden">
                    <input name="file" type="file" />
                    <input type="submit" name="submit" value="Upload file" />
                </div>
                <div class="hidden" id="dropzone__hidden"></div>
            </form>

            <div class="file-picker__overlay"></div>
        </div>

        <a id="file-link"></a>
    </div>
    <!-- These are probably out dated so you might want to use newest versions -->
    <script src="https://cdn.rawgit.com/kimmobrunfeldt/progressbar.js/0.7.0/dist/progressbar.js"></script>
    <script src="https://cdn.rawgit.com/enyo/dropzone/v3.12.0/downloads/dropzone.js"></script>
    <!-- Use edge version of lodash for throttle.cancel() -->
    <script src="https://cdn.rawgit.com/lodash/lodash/49b68a7903c58876e0d9a2abd6c43746fdf3dc04/lodash.js"></script>

    <script>
        window.onload = onLoad;

        // Disabling autoDiscover, otherwise Dropzone will try to attach twice
        Dropzone.autoDiscover = false;
        var DROPZONE_OPTIONS = {
            url: "api/upload",
            paramName: 'photo',  // The name that will be used to transfer the file
            maxFiles: 1,
            maxFilesize: 3000,  // MB
            dictDefaultMessage: '',
            createImageThumbnails: false,
            previewsContainer: '#dropzone__hidden',

        }

        function onLoad() {
            var rotatingBar = initProgressBar('#file-picker__progress');
            initDropzone(rotatingBar);
        }

        function initProgressBar(container) {
            var Shape = ProgressBar.Circle;

            var rotatingBar = new RotatingProgressBar(Shape, container, {
                color: '#333',
                trailColor: '#eee',
                strokeWidth: 1,
                duration: 500
            });
            rotatingBar.bar.set(1);

            return rotatingBar;
        }

        function initDropzone(rotatingBar) {
            Dropzone.options.dropzone = DROPZONE_OPTIONS;
            var dropzone = new Dropzone('#dropzone');
            var picker = document.querySelector('.file-picker');
            var overlay = document.querySelector('.file-picker__overlay');
            overlay.onclick = function () {
                dropzone.removeAllFiles(true);
            }

            var animateThrottled = _.throttle(
                _.bind(rotatingBar.bar.animate, rotatingBar.bar),
                500
            );

            dropzone.on('sending', function (file) {
                setLink('');
                addClass(picker, 'uploading');

                rotatingBar.bar.set(0.05);
                rotatingBar.rotate();
            });

            dropzone.on('uploadprogress', function (file, percent) {
                animateThrottled(percent / 100);
            });

            dropzone.on('success', function (file, response) {

                window.location = 'ManageFile?AutoKey=' + response;
                /*


                var url = 'index/' + response.name;
                uploadFinally(false, url);*/
            });

            dropzone.on('error', function (file, errorMessage) {
                uploadFinally(true);
            });

            function uploadFinally(err, url) {
                animateThrottled.cancel();

                if (err) {
                    rotatingBar.bar.set(1);
                    activateFilePicker();
                } else {
                    rotatingBar.bar.animate(1, function () {
                        dropzone.removeAllFiles();
                        activateFilePicker();
                        setLink(url);
                    });
                }
            }

            function activateFilePicker() {
                removeClass(picker, 'uploading');
                rotatingBar.stopRotating();
            }
        }

        function setLink(url) {
            var aElement = document.querySelector('#file-link');
            setText(aElement, url);
            aElement.title = url;
            aElement.href = url;
        }

        // Small wrapper for ProgressBar

        var RotatingProgressBar = function RotatingProgressBar(Shape, container, opts) {
            this._container = document.querySelector(container);
            this.bar = new Shape(container, opts);
        };

        RotatingProgressBar.prototype.rotate = function rotate() {
            addClass(this._container, 'rotating');
        };

        RotatingProgressBar.prototype.stopRotating = function stopRotating() {
            removeClass(this._container, 'rotating');
        };


        // Utils

        function addClass(element, addName) {
            var classNames = element.className.split(' ');
            if (classNames.indexOf(addName) !== -1) {
                return;
            }

            element.className += ' ' + addName;
        }

        function removeClass(element, removeName) {
            var newClasses = [];
            var classNames = element.className.split(' ');
            for (var i = 0; i < classNames.length; ++i) {
                if (classNames[i] !== removeName) {
                    newClasses.push(classNames[i]);
                }
            }

            element.className = newClasses.join(' ');
        }

        function setText(element, text) {
            element.textContent = text;
        }
    </script>
*@


<style>
    .maindiv {
        font-family: 'Roboto';
        font-weight: 100;
        width: 100%;
        text-align: center;
    }

    header {
        margin-top: 2rem;
        font-size: 32px;
    }

    .progress-bar {
        height: 35px;
        width: 250px;
        border: 2px solid darkblue;
    }

    .progress-bar-fill {
        height: 100%;
        width: 0%;
        background-color: lightblue;
        display: flex;
        align-items: center;
        transition: width 0.25s;
    }

    .progress-bar-text {
        margin-left: 10px;
        font-weight: bold;
    }

    .note {
        font-size: 10pt;
        color: #484848;
        margin-left: 9px;
    }

        .note > span {
            font-weight: 700
        }
    /*
        .main-block {
            max-width: 900px;
            min-width: 700px;
            margin-left: 5rem;
        }
                */
    .buttons {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    #files_div {
        overflow: auto;
        height:140px;
        width: 70%;
        margin-left: 3rem;
    }
    .select_button {
        margin-left: 3rem;
 
    }

    .upload_button {
        margin-right: 3rem;
    }
       
    
</style>

<div class="maindiv main-block">

    <form id="form" action="javascript:upload()" method="post" enctype="multipart/form-data">
        <header>Upload</header>
        <br />


        <div class="buttons">

            <div class="select_button">
                @(Html.DevExtreme().FileUploader()
                    .Name("Photo")
                    .ID("File")
                    .SelectButtonText("Select file")
                    .LabelText("")
                  //  .OnProgress("progressChanged")
                    .Accept("*")
                    .Multiple(true)
                    .UploadMode(FileUploadMode.UseForm)
                )
            </div>
            <div class="upload_button">
                @(Html.DevExtreme().Button()
                .ID("button")
                .Text("Upload file")
                .Type(ButtonType.Success)
                .UseSubmitBehavior(true)
            )
            </div>



        </div>
        <div id="files_div">

        </div>

        <div id="pleaseWait" style="display:none">
            Please wait... Uploading.
        </div>
        <div class="progress-bar" style="display:none" id="progressBar">
            <div class="progress-bar-fill">
                <span class="progress-bar-text">0%</span>
            </div>
        </div>

        <!--
                       (Html.DevExtreme().TagBox()

    .DataSource(d => d.Mvc()
        .Controller("Categories")
        .LoadAction("Get")
        .Key("AutoKey")
    )

    .DisplayExpr("Name")
    .ValueExpr("AutoKey")
    .ID("categoriesTagBox")
    .Name("categoriesTagBox")
             .SearchExpr("Name")
             .HideSelectedItems(true)
             .OnSelectionChanged("onValueChanged")
             .ShowClearButton(true)
                       .SearchEnabled(true)
                        )-->
        <br />
        <div class="dx-field">
            <div class="dx-field-label">Contacts:</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                        /*
        .DataSource(d => d.Mvc()
                   .Controller("Contacts")
                   .LoadAction("Get")
                   .Key("AutoKey")
               )*/
        .DisplayExpr("Name")

    .ID("contactsTagBox")
    .Name("contactsTagBox")
        .ValueExpr("AutoKey")
        .HideSelectedItems(true)
        .ShowClearButton(true)
        .OnSelectionChanged("getContacts")
        .SearchExpr("Name")
                  .SearchEnabled(true)
                        )


            </div>
        </div>
        <div class="dx-field">
            <div class="dx-field-label">Search Keys:</div>
            <div class="dx-field-value">
                @(Html.DevExtreme().TagBox()
                        /*
        .DataSource(d => d.Mvc()
                   .Controller("SearchKeys")
                   .LoadAction("Get")
                   .Key("AutoKey")
               )*/
        .DisplayExpr("Name")

    .ID("searchKeysTagBox")
    .Name("searchKeysTagBox")
        .ValueExpr("AutoKey")
        .HideSelectedItems(true)
        .ShowClearButton(true)
        .OnSelectionChanged("getKeys")
        .SearchExpr("Name")
                  .SearchEnabled(true)
                        )
            </div>
        </div>

        @(Html.DevExtreme().TreeList()
            .ID("treeList")

    .DataSource(d => d.Mvc()
        .Controller("Categories")
        .LoadAction("Get")
        .Key("AutoKey")
    ).KeyExpr("AutoKey")
    .OnSelectionChanged("onValueChangedTree")
    .ElementAttr("class","categoriesTreeList")
    .SelectedRowKeys(new[] { 1 })
    .SearchPanel(s=>s
                        .Visible(true)
                        .Placeholder("Search")
                        .SearchVisibleColumnsOnly(true)
                )
                .OnContentReady("treeReady")

                .ParentIdExpr("FatherAutoKey")
                .ExpandedRowKeys(new[] { 1 })
                .ShowRowLines(true)
        .Selection(s => s.Mode(SelectionMode.Multiple))
                .ShowBorders(true)
                .ColumnAutoWidth(true)
                .Columns(columns =>
                {
                    columns.Add().DataField("Name")
                        .Caption("Category Name");

                })
            )



    </form>



</div>

<script src="~/js/progressbar.js"></script>
<script>
    var files;
    var categories;
    var keys;
    var contacts;
    function onValueChanged(e) {
        // categories = e.component._selectedItems;
        console.log(e);
    }
    function getContacts(e) {
        contacts = e.component._selectedItems;
    }
    function getKeys(e) {
        keys = e.component._selectedItems;
    }

    function onValueChangedTree(e) {
        categories = e.selectedRowsData;

        //$("#gridContainer").dxDataGrid({
        //   dataSource: "api/Upload/GetDocuments?CatID=" + selectedID,
        // });


    }

    function progressChanged(e) {
        console.log(e);
    }

    function treeReady(e) {
        $('#treeList').dxTreeList('instance').deselectAll();
    }
    window.onchange = function () { getfiles() }
    function getfiles() {
        /*
        let filesUploaderContainer = document.querySelector(".dx-fileuploader-files-container");
        filesUploaderContainer.style.display = "none";
        let fileUploader = document.getElementsByClassName("dx-fileuploader-file-container");
        let arr = Array.from(fileUploader);
        console.log(fileUploader);
        for (let i = 0; i < arr.length; i++) {
            console.log(arr[i]);
            $('#files_div').append(arr[i]);
          //  $("#files_div").html(arr[i]);
        }*/
        let filesUploaderContainer = document.querySelector(".dx-fileuploader-files-container");
        $('#files_div').html(filesUploaderContainer);
    //    filesUploaderContainer.style.display = "none";
    }

    $(document).ready(function () {
        $("#File").change(function (e) {
            files = e.target.files;
        })

        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Contacts", true);
        xmlHttp.send();

        var res = JSON.parse(xmlHttp.responseText);

        $("#contactsTagBox").dxTagBox({
            dataSource: res.data,
            valueExpr: 'AutoKey',
            displayExpr: 'Name'
        });


        xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/SearchKeys", false);
        xmlHttp.send();

        res = JSON.parse(xmlHttp.responseText);

        $("#searchKeysTagBox").dxTagBox({
            dataSource: res.data,
            valueExpr: 'AutoKey',
            displayExpr: 'Name'
        });
    })

    const progressBarFill = document.querySelector(
        "#progressBar > .progress-bar-fill"
    );
    const progressBarText = progressBarFill.querySelector(
        ".progress-bar-text"
    );

    function upload() {
        console.log(files);

        if (categories == null) {
            alert('Choose a category!');
            return;
        }

        if (files == null || files.length < 1) {
            alert('Please choose a file!');
            return;
        }

        $(document).ready(function () {
            $("#pleaseWait").fadeIn(100);
            $("#progressBar").fadeIn(100);
        })

        var i = files.length;

        Array.from(files).forEach(file => {

            i--;
            progressBarFill.style.width = "0%";
            progressBarText.textContent = "0%";

            const xhr = new XMLHttpRequest();

            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    if (i == 0)
                        window.location = 'Index';
                }
            }
            const fd = new FormData();
            fd.append('photo', file);
            fd.append('categories', JSON.stringify(categories))
            fd.append('contacts', JSON.stringify(contacts));
            fd.append('keys', JSON.stringify(keys));


            xhr.open("POST", "api/upload", true);

            xhr.upload.addEventListener("progress", (e) => {
                const percent = e.lengthComputable ? (e.loaded / e.total) * 100 : 0;

                progressBarFill.style.width = percent.toFixed(2) + "%";
                progressBarText.textContent = percent.toFixed(2) + "%";
            });

            xhr.send(fd);
        });

    }
</script>
