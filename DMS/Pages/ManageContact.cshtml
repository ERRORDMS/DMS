@page
@model DMS.Pages.ManageContactModel
@{
    ViewData["Title"] = Localizer["Title"];
    Layout = "~/Pages/_Layout.cshtml";

    /*
    Microsoft.Extensions.Primitives.StringValues queryVal;


    string EncryptedString = "";


    if (Request.Query.TryGetValue("f", out queryVal))
    {
        EncryptedString = queryVal.FirstOrDefault();
    }



    long AutoKey = 0;

    if (!string.IsNullOrEmpty(EncryptedString))
    {
        AutoKey = Convert.ToInt64(DMS.Models.StringCipher.Decrypt(EncryptedString).Split("|")[1]);
    }*/



}
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
<!-- Syncfusion Essential JS 2 Styles -->
<link rel="stylesheet" href="https://cdn.syncfusion.com/ej2/material.css" />
@*
    <style>
        .empty_field {
            color: rgb(250,82,82);
            margin-left: 2rem;
            display: none;
        }

        .already_exists {
            color: rgb(250,82,82);
            margin-left: 2rem;
            display: none;
        }

        .add_contact_form {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #header {
            width: 100%;
            height: 100px;
            background: rgb(255,255,255);
            z-index: 2000;
            box-shadow: 0px 2px 5px black;
        }

        form {
            text-align: center;
        }

        .contact_input {
            width: 360px;
        }

        .add_Contact_button {
            width: 100%;
            height: 50px;
            border-radius: 15px;
            outline: none;
            border: none;
            background-image: linear-gradient(to right, rgb(255,87,34), rgb(255,92,38), rgb(255,114,45));
            background-size: 200%;
            font-size: 1.2rem;
            color: #fff;
            font-family: 'Poppins', sans-serif;
            text-transform: uppercase;
            margin: 1rem 0;
            cursor: pointer;
            transition: .5s;
        }

            .add_Contact_button:hover {
                box-shadow: 1px 1px 4px black;
            }

        .error {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .contact_found, .server_error {
            color: rgb(255,82,82);
            display: none;
        }

        .empty_field {
            color: rgb(255,82,82);
            display: none;
        }

        .inputs {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .dataGrid {
            margin-top: 3rem;
        }

        #contactsList {
            height: 50vh;
        }

        .space {
            margin-left: 2rem;
        }
    </style>
*@
@section Styles{ 
<style>

    .aligneach1 {
        vertical-align: top;
        max-width: 70%;
        min-width: 300px;
        display: inline-block;
    }
    .aligneach2 {
        vertical-align: top;
        max-width: 15%;
        min-width: 300px;
        display: inline-block;
    }
</style>

<!-- Syncfusion Essential JS 2 Scripts -->
<script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js"></script>
}

<div style="margin-left:120px;margin-right:310px;margin-top:100px">
    @(Html.DevExtreme().DataGrid<DMS.Models.Contact>()
        .ID("contactsList")
        .Editing(editing =>
        {
            editing.Mode(GridEditMode.Row);
            editing.AllowAdding(true);
            editing.AllowDeleting(true);
            editing.AllowUpdating(true);
        })
           .DataSource(d => d.Mvc()
           .Controller("Contacts")
           .UpdateAction("UpdateContact")
           .InsertAction("AddContact")
           .DeleteAction("DeleteContact")
           .LoadAction("Get")
           .Key("AutoKey")
           )
           .KeyExpr("AutoKey")
           .SearchPanel(s => s
                    .Visible(true)
                    .Placeholder("Search")
                    .SearchVisibleColumnsOnly(true)
            )
            .ShowRowLines(true)
            .OnToolbarPreparing("toolbarPreparing")
            .ShowBorders(true)
            .ColumnAutoWidth(true)
            .ElementAttr("class", "aligneach1")
            .Columns(columns =>
            {
                columns.AddFor(c => c.Name)
                    .Caption(Localizer["ContactNameCol"].Value)
                    .ValidationRules(vr =>
                    {
                        vr.AddAsync()
                            .Message("Contact already exists!")
                            .ValidationCallback("validateContact");
                    });

                columns.AddFor(c => c.Phone)
                    .Caption("Phone Number");

                columns.AddFor(c => c.Email)
                    .Caption("Email Address");

                columns.AddFor(c => c.CategoryID)
                    .Caption("Category")
                    .Lookup(S =>
                        S.DataSource(d => d.Mvc()
                            .Controller("Contacts")
                            .LoadAction("GetContactCategories")
                            .Key("AutoKey")
                        )
                        .AllowClearing(true)
                        .DisplayExpr("Name")
                        .ValueExpr("AutoKey")
                    );

            })
        )
    @(Html.DevExtreme().DataGrid<DMS.Models.ContactCategory>()
        .ID("contactCategoriesList")
        .Editing(editing =>
        {
            editing.Mode(GridEditMode.Row);
            editing.AllowAdding(true);
            editing.AllowDeleting(true);
            editing.AllowUpdating(true);
        })
           .DataSource(d => d.Mvc()
           .Controller("Contacts")
           .UpdateAction("UpdateContactCategory")
           .InsertAction("AddContactCategory")
           .DeleteAction("DeleteContactCategory")
           .LoadAction("GetContactCategories")
           .Key("AutoKey")
           )
           .KeyExpr("AutoKey")
           .SearchPanel(s => s
                    .Visible(true)
                    .Placeholder("Search")
                    .SearchVisibleColumnsOnly(true)
            )
            .ShowRowLines(true)
            .ShowBorders(true)
            .ColumnAutoWidth(true)
            .ElementAttr("class", "aligneach2")
            .Columns(columns =>
            {
                columns.AddFor(s=>s.Name)
                    .Caption("Name")
                    .ValidationRules(vr =>
                    {
                        vr.AddAsync()
                            .Message("Category already exists!")
                            .ValidationCallback("validateContactCategory");
                    });

            })
        )

</div>
@*


    @if (AutoKey != 0)
    {

                <script>

                    $(document).ready(function () {


                        $('#txtName').val(getVal());
                        $('#txtName').focus();
                        $('#txtName').blur();

                        });

                    function getVal() {
                         var xmlHttp = new XMLHttpRequest();
                         xmlHttp.open("GET", "api/Contacts/Name?AutoKey=" + @AutoKey, false );
                         xmlHttp.send();
                         return xmlHttp.responseText;
                    }

                    function saveCon() {

                        $(document).ready(function () {
                            $('.content-block').click(function () {
                                window.onkeyup = function () {
                                    $('.empty_field').fadeOut(100);
                                    $(".already_exists").fadeOut(100);
                                }
                            })
                        })
                        if (txtName.value == '') {
                            $('.empty_field').fadeIn(100)
                            return;
                        }
                        if (txtName.value !== '') {
                            $('.empty_field').fadeOut(0)
                        }
                        const xhr = new XMLHttpRequest();

                        xhr.onreadystatechange = function () {
                          if (this.readyState == 4 && this.status == 200) {
                              var t = this.responseText;
                              var obj = JSON.parse(t);

                              var statusCode = obj.StatusCode;
                              if (statusCode == 0) {
                                  window.location = "ManageContact";
                              }
                              if (statusCode == 105) {
                                  $(".already_exists").fadeIn(100);
                              } else {
                                  $(".already_exists").fadeOut(100);
                              }
                          }
                        }

                    xhr.open("POST", 'api/Contacts/Save', true);

                        const fd = new FormData();

                        fd.append('AutoKey', @AutoKey);
                        fd.append('Name', txtName.value);
                        xhr.send(fd);
                    }


                    function deleteCon() {
                        const xhr = new XMLHttpRequest();

                    xhr.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            window.location = "ManageContact";
                        }
                    }

                    xhr.open("POST", 'api/Contacts/Delete', true);

                        const fd = new FormData();

                        fd.append('AutoKey', @AutoKey);
                        xhr.send(fd);

                    }

                </script>


                <div class="empty_field">
                    @Localizer["MissingArgs"]
                </div>
                <div class="already_exists">
                    @Localizer["AlreadyExists"]
                </div>
                <h2 class="content-block">@Localizer["ManageContact"]</h2>
                <div>

                </div>
                @(Html.DevExtreme().TextBox()

                            .Placeholder(Localizer["ContactNameCol"].Value)
                                    .ElementAttr("class", "content-block")
                                    .Name("txtName")
                )

                <br />
                @(Html.DevExtreme().Button()
                    .Icon("save")
                    .Text(Localizer["Save"].Value)
                    .OnClick("saveCon")
                    .ElementAttr("class", "content-block")

                )
                @(Html.DevExtreme().Button()
                    .Icon("trash")
                    .Text(Localizer["DeleteCon"].Value)
                    .OnClick("deleteCon")
                    .ElementAttr("class", "content-block")

                )
            }
            else
            {
                <div class="error">
                    <div class="contact_found">
                        @Localizer["AlreadyExists"]
                    </div>
                    <div class="server_error">
                        @Localizer["InternalError"]
                    </div>
                    <div class="empty_field">
                        @Localizer["MissingArgs"]
                    </div>
                </div>
                <div id="header">
                    <div class="add_contact_form">
                        <h2 class="content-block" style="font-size: 20px; margin-left: 1rem;">@Localizer["ManageContact"]</h2>
                        <form action="javascript:addContact()">
                            <div class="inputs">
                                @(Html.DevExtreme().TextBox()
                            .Mode(TextBoxMode.Text)
                            .Name("ContactName")
                            .Placeholder(Localizer["ContactName"].Value)
                            .ElementAttr("class", "contact_input")
                            .HoverStateEnabled(true)
                        )
                                <span class="space"></span>
                                @(Html.DevExtreme().DateBox()
                            .Type(DateBoxType.Date)
                            .Name("birthdayDateBox")
                            .Placeholder(Localizer["Birthday"].Value)
                            .Value(DateTime.Now)
                            .ShowClearButton(true)
                            .Max(DateTime.Now)
                        )
                                <span class="space"></span>

                                @(Html.DevExtreme().Button()
                    .Icon("plus")
                    .Text(Localizer["AddContact"].Value)
                    .OnClick("addContact")

                )
                            </div>
                        </form>
                    </div>
                </div>
        <div class="dataGrid">

        </div>

    }
    @*
        <script>

            //<![CDATA[
            function cellTemplate(element, cellInfo) {
                $('<a/>')
                    .text('@Localizer["Manage"]')
                    .click(function () {
                        onEdit(element, cellInfo);
                    })
                    .appendTo(element);
            }

            function onEdit(element, cellinfo) {
                var autokey = cellinfo.data.AutoKey;

                var xmlHttp = new XMLHttpRequest();
                xmlHttp.open("GET", "api/Upload/GetEncryptedString?key=" + autokey, false);
                xmlHttp.send();

                var str = xmlHttp.responseText;

                window.location.href = 'ManageContact?f=' + str;
            }
            function addContact() {
                if (!ContactName.value) {
                    $(document).ready(function () {
                        $('.empty_field').fadeIn(100);
                    });
                    return;
                } else if (!birthdayDateBox.value) {
                    $(document).ready(function () {
                        $(".empty_field").fadeIn(100);
                    })
                } else {
                    $('.empty_field').fadeOut(0);
                    const xhr = new XMLHttpRequest();
                    xhr.onreadystatechange = function () {
                        if (this.readyState == 4 && this.status == 200) {
                            var t = this.response;
                            var obj = JSON.parse(t);
                            var statusCode = obj.StatusCode;

                            if (statusCode == 0) {
                                $(document).ready(function () {
                                    $(".contact_found").fadeOut(0, function () {
                                        $(".server_error").fadeOut(0, function () {
                                            $('.empty_field').fadeOut(0)
                                        })
                                    })
                                });

                                $('#contactsList').dxDataGrid('instance').refresh();

                                $('#ContactName').val("");
                                $('#ContactName').focus();
                                $('#ContactName').blur();

                            }
                            if (statusCode == 103) {
                                $(document).ready(function () {
                                    $(".server_error").fadeIn(100);
                                })
                            } else {
                                $('.server_error').fadeOut(0)
                            }
                            if (statusCode == 105) {
                                $(".contact_found").fadeIn(100);
                            } else {
                                $('.contact_found').fadeOut(0);
                            }
                        }
                    }
                    var contact = ContactName.value;
                    const fd = new FormData();
                    fd.append("Name", contact);
                    fd.append('Birthday', birthdayDateBox.value)
                    xhr.open("POST", "api/Contacts/addContact", true);
                    xhr.send(fd);
                }

            }
        </script>*@

<script>
    var isEnterprise;
    var permissons;
    $(document).ready(function () {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("GET", "api/Enterprise/IsEnterprise", false);
        xmlHttp.send();

        isEnterprise = JSON.parse(xmlHttp.responseText);


        if (isEnterprise) {
            // Get user permissions

            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open("GET", "api/Permissions/UserPermissions", false);
            xmlHttp.send();

            var result = JSON.parse(xmlHttp.responseText);

            permissions = result.map(a => a.Name);

        }

        $("#contactsList").dxDataGrid({
            editing: {
                mode: "row",
                allowUpdating: function (e) {
                    return isEnterprise == false || permissions.includes('Can Edit Contacts');
                },
                allowDeleting: function (e) {
                    return isEnterprise == false || permissions.includes('Can Edit Contacts');
                },
                allowAdding: function (e) {
                    return isEnterprise == false || permissions.includes('Can Add Contacts');
                },
                useIcons: true
            }
        });
    });

    function validateContact(param) {
        return $.ajax({
            url: 'api/Contacts/Exists',
            data: {
                Name: param.value,
                AutoKey: param.data.AutoKey
            },
            dataType: "json"
        });
    }

    function validateContactCategory(param) {
        return $.ajax({
            url: 'api/Contacts/CatExists',
            data: {
                Name: param.value,
                AutoKey: param.data.AutoKey
            },
            dataType: "json"
        });
    }

    function toolbarPreparing(e) {

        if (isEnterprise) {
            if (!permissions.includes('Can Add Contacts')) {
                e.toolbarOptions.items.shift();
            }
        }
    }
</script>