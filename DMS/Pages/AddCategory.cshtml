@page
@{
    ViewData["Title"] = "AddCategory";
}

<head>
    <style>


        .add_Category_form {
            position: absolute;
            left: 40%;
            top: 40%;
            transform: translate(-50%,-50%);
        }

        form {
            text-align: center;
        }

        .category_input {
            width: 360px;
        }

        .parent_input {
            width: 360px;
        }


        .add_Category_button {
            width: 100%;
            height: 50px;
            border-radius: 15px;
            outline: none;
            border: none;
            background-image: linear-gradient(to right, rgb(255,87,34), rgb(255,92,38), rgb(255,114,45));
            background-size: 200%;
            font-size: 1.2rem;
            color: #fff;
            font-family: 'Poppins', sans-serif;
            text-transform: uppercase;
            margin: 1rem 0;
            cursor: pointer;
            transition: .5s;
        }
            .add_Category_button:hover {
                box-shadow: 1px 1px 4px black;
            }
    </style>  
</head>
    <h2 class="content-block">Add Category</h2>
<div class="add_Category_form">
    <form action="javascript:addCategory()">
        <div class="dx-field-value">
            @(Html.DevExtreme().TextBox()
                .Mode(TextBoxMode.Text)
                .Name("CategoryName")
                .Placeholder("Category Name")
                .ElementAttr("class", "category_input")
                .HoverStateEnabled(true)
            )
            <br />
            <br />
            @(Html.DevExtreme().DropDownBox()
                .ValueExpr("AutoKey")
                .DisplayExpr("Text")
                .ElementAttr("class", "parent_input")
                .DropDownOptions(o => o.Height(350))
                .DataSource(d => d.Mvc()
                    .Controller("Categories")
                    .LoadAction("Get")
                    .Key("AutoKey")
                )
                .Placeholder("Select parent category")
                .OnValueChanged("getparent")
                .ShowClearButton(true)
                .ContentTemplate(new TemplateName("EmbeddedTreeViewSingle"))
            )
            <br />
            <br />
            @using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewSingle"))
            {
                @(Html.DevExtreme().TreeView()
            .DataSource(new JS(@"component.option(""dataSource"")"))
            .KeyExpr("AutoKey")
            .DisplayExpr("Name")
            .ItemsExpr("Items")
            .ExpandedExpr("Expanded")
            .ParentIdExpr("FatherID")
            .DataStructure(TreeViewDataStructure.Plain)
            .SelectionMode(NavSelectionMode.Single)
            .SelectByClick(true)
            .Height(235)
            .OnItemSelectionChanged(@<text>
                        function(args) {
                        var nodes = args.component.getNodes(),
                        value = getSelectedItemsKeys(nodes);

                        component.option("value", value);
                        }
            </text>)
.OnContentReady(@<text>
                    function(args) {
                    syncTreeViewSelection(args.component, component.option("value"));
                    }
</text>)
                )
            }
            <br />
            <br />
            <input type="submit" value="Add Category" class="add_Category_button" />
        </div>
    </form>
</div>
<div class="Category_found" style="display: none">
    the Category already exists
</div>
<div class="server_error" style="display: none;">
    Internal Server Error
</div>
<div class="empty_field" style="display: none;">
    Please Enter all fields
</div>
<script>
    function syncTreeViewSelection(treeView, value) {
        if (!value) {
            treeView.unselectAll();
        } else {
            treeView.selectItem(value);
        }
    }

    function getSelectedItemsKeys(items) {
        var result = [];
        items.forEach(function (item) {
            if (item.selected) {
                result.push(item.key);
            }
            if (item.items.length) {
                result = result.concat(getSelectedItemsKeys(item.items));
            }
        });
        return result;
    }

    var parent;

    function getparent(e) {
        console.log(e);
        parent = e.value;
        console.log(parent);
    }

    function treeBox_valueChanged(e) {
        var $treeView = e.component.content().find(".dx-treeview");
        if ($treeView.length) {
            syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
        }
    }

    function addCategory() {
        if (CategoryName.value == "") {
            console.log("Hi");
            $(document).ready(function () {
                $(".empty_field").fadeIn(100)
            })
            return;
        } else {
            $(document).ready(function () {
                $(".empty_field").fadeOut(0)
            })
            const xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var t = this.response;
                    console.log(t);
                    var obj = JSON.parse(t);
                    console.log(obj);

                    var statusCode = obj.StatusCode;

                    if (statusCode == 0) {
                        console.log('SUCCESS');
                        $(document).ready(function () {
                            $('.Category_found').fadeOut(0, function () {
                                $(".server_error").fadeOut(0)
                            });
                        })
                        window.location = '/';
                    } else {
                        console.log('bad');
                    }
                    if (statusCode == 103) {
                        console.log('server error');
                        $(document).ready(function () {
                            $(".server_error").fadeIn(100)
                        })
                    } else {
                        console.log('error');
                        $(".server_error").fadeOut(100)
                    }
                    if (statusCode == 105) {
                        console.log('Category found');
                        $('.Category_found').fadeIn(100);
                    } else {
                        console.log('the Category not exists');
                        $('.Category_found').fadeOut(100)
                    }
                }
            }
            var category = CategoryName.value;
            const fd = new FormData();
            fd.append("Name", category);
            fd.append("FatherID", parent);
            xhr.open("post", "api/Categories/addCategory", true);
            xhr.send(fd);
        }
    }

</script>
