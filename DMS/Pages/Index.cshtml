@page
@model DMS.Pages.IndexModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Pages/_Layout.cshtml";
}

@using DMS.Models

<style>
    .tree {
        margin-left: 5rem;
        padding: 1rem;
    }

    #treeList {
        max-height: 440px;
    }

    .dx-sortable-dragging {
        opacity: 0.9
    }

    .options {
        margin-top: 20px;
        padding: 20px;
        background-color: rgba(191, 191, 191, 0.15);
        position: relative;
    }

    .caption {
        font-size: 18px;
        font-weight: 500;
    }

    .option {
        margin-top: 10px;
        margin-right: 40px;
        display: inline-block;
    }

        .option:last-child {
            margin-right: 0;
        }
</style>
<div class="tree">
    <h2 class="content-block">My Data</h2>
        
        @(Html.DevExtreme().TextBox()

        .Name("txtSearch")
        .Width(600)
        .ShowClearButton(true)
        .ElementAttr("class", "content-block")
         .Buttons(buttons =>
             {
                 buttons.Add()
                 .Name("btnSearch")
                 
                 .Location(TextEditorButtonLocation.Before)
                 .Widget(w => w.Button()
                     .UseSubmitBehavior(true)
                     .ID("btnSearch") 
                     .OnClick("onClick")
                     .Type(ButtonType.Default)
                     .Icon(Url.Content("~/images/icons/search.png")));
         })
        .Placeholder("Search")

    )

    <br />
    <div id="treeListDemo">
        @(Html.DevExtreme().TreeList()
        .ID("treeList")

.DataSource(d => d.Mvc()
    .Controller("Categories")
    .LoadAction("Get")
    .Key("AutoKey")
).KeyExpr("AutoKey")
.OnSelectionChanged("onValueChangedTree")
.SelectedRowKeys(new[] { 1 })
            .ParentIdExpr("FatherID")
            .ExpandedRowKeys(new[] { 1 })
            .ShowRowLines(true)
    .Selection(s => s.Mode(SelectionMode.Single))
            .ShowBorders(true)
            .ColumnAutoWidth(true)
            /*.RowDragging(rd => rd
                .AllowDropInsideItem(true)
                .AllowReordering(true)
                .OnDragChange("onDragChange")
                .OnReorder("onReorder")
                .ShowDragIcons(true)
            )*/
            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption("Category Name");

            })
        )
        @(Html.DevExtreme().DataGrid()
            .ID("gridContainer")
                .OnContentReady("contentReady")
     /*
 .DataSource(d => d.Mvc()
.Controller("api/Upload")
.LoadMethod("GET")
.LoadParams(new { CatID = new JS("selectedID") })
.LoadAction("GetDocuments")
.Key("InfoAutoKey")
).KeyExpr("InfoAutoKey")*/
     .DataSourceOptions(o => o.ReshapeOnPush(true))
    .RepaintChangesOnly(true)
            .ShowRowLines(true)
            .ShowBorders(true)
            .ColumnAutoWidth(true)
            /*.RowDragging(rd => rd
                .AllowDropInsideItem(true)
                .AllowReordering(true)
                .OnDragChange("onDragChange")
                .OnReorder("onReorder")
                .ShowDragIcons(true)
            )*/
            .Columns(columns =>
            {
                columns.Add().DataField("Name")
                    .Caption("Name");

                columns.Add().DataField("Ext")
                .Caption("Type");

                columns.Add().DataField("DateTimeAdded")
                    .Caption("Date Added");
                columns.Add()
             .Caption("View")
             .Width(100)
             .Alignment(HorizontalAlignment.Center)
             .AllowFiltering(false)
             .AllowSorting(false)
             .CellTemplate(new JS("cellTemplate"));

            })
        )


    </div>  

    <script>
        function cellTemplate(element, cellInfo) {
            $('<a/>')
                .text("View")
                .click(function () {
                    onEdit(element, cellInfo);
                })
                .appendTo(element);
        }

        function onEdit(element, cellinfo) {
            var autokey = cellinfo.data.AutoKey;

            window.location.href = 'Viewer?AutoKey=' + autokey;
        }
        var selectedID = -1;
        var grid;
        function onDragChange(e) {
            var treeList = e.component,
                visibleRows = treeList.getVisibleRows(),
                sourceNode = treeList.getNodeByKey(e.itemData.ID),
                targetNode = visibleRows[e.toIndex].node;

            while (targetNode && targetNode.data) {
                if (targetNode.data.ID === sourceNode.data.ID) {
                    e.cancel = true;
                    break;
                }
                targetNode = targetNode.parent;
            }
        }

        function contentReady(e) {
            grid = e;
        }
        function onValueChangedTree(e) {
            selectedID = e.selectedRowKeys[0];


            console.log(grid);

            $("#gridContainer").dxDataGrid({
                dataSource: "api/Upload/GetDocuments?CatID=" + selectedID,
            });


        }

        function onReorder(e) {
            var treeList = e.component,
                visibleRows = treeList.getVisibleRows(),
                sourceData = e.itemData,
                targetData = visibleRows[e.toIndex].data;

            if (e.dropInsideItem) {
                e.itemData.Head_ID = targetData.ID;
            } else {
                var sourceIndex = employees.indexOf(sourceData),
                    targetIndex = employees.indexOf(targetData);

                if (sourceData.Head_ID !== targetData.Head_ID) {
                    sourceData.Head_ID = targetData.Head_ID;
                    if (e.toIndex > e.fromIndex) {
                        targetIndex++;
                    }
                }

                employees.splice(sourceIndex, 1);
                employees.splice(targetIndex, 0, sourceData);
            }

            treeList.refresh();
        }

        function getTreeList() {
            return $("#treeList").dxTreeList("instance");
        }
        /*
        $(document).ready(function () {
            $("#btnSearch").click(function (e) {
                alert('Hello');
                e.preventDefault();

                var t = $("input[name='__RequestVerificationToken']").val();
                $.ajax({
                    url: $(this).attr("formaction"),
                    headers:
                    {
                        "RequestVerificationToken": t
                    },
                    type: "POST",
                    data: { data: 'foo2' },
                }).done(function (data) {
                    console.log(data);
                }).fail(function (a, v, e) {
                    alert(e);
                });
            });
        });*/

        function onClick() {
            /*
                  const xhr = new XMLHttpRequest();

        xhr.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {

            }
        }

        xhr.open("POST", 'api/Search', true);

            const fd = new FormData();

            fd.append('sQuery', txtSearch.value);
            xhr.send(fd);*/

            $("#gridContainer").dxDataGrid({
                dataSource: "api/Search?sQuery=" + txtSearch.value,
            });

        }
    </script>

    <script src="~/js/employees.js"></script>


</div>
