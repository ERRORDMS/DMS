@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@using System.Globalization

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="author" content="">

    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link rel="stylesheet"
          href="https://use.fontawesome.com/releases/v5.6.3/css/all.css"
          integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/"
          crossorigin="anonymous" />
    <link rel="stylesheet" href="~/css/vendor.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/Site.css" />
    <link rel="stylesheet" href="~/css/Navbar.css" />
    <link href="~/css/Roboto.css" rel='stylesheet' type='text/css'>
        
    @if (CultureInfo.CurrentCulture.TextInfo.IsRightToLeft)
    {
        <style>
            body {
                direction: rtl;
            }
        </style>
    }
    <script src="~/js/vendor.js" asp-append-version="true"></script>
</head>

<body>
    <div id="app-side-nav-outer-toolbar">
        <div class="layout-header" style="height:60px;overflow: hidden;">
            @(Html.DevExtreme().Toolbar()
                .Items(items =>
                {
                        items.Add()
                            .Widget(w => w
                                .Button()
                                .Icon("menu")
                                .OnClick("DMS.onMenuButtonClick")
                            )
                            .Location(System.Globalization.CultureInfo.CurrentCulture.Name != "en-US" ? ToolbarItemLocation.After : ToolbarItemLocation.Before)
                            .CssClass("menu-button");
                    /*
                    items.Add()
                            .Html(@"<i class='fas fa-folder' style='color: #0087ff'></i>")
                            .Location(System.Globalization.CultureInfo.CurrentCulture.Name != "en-US" ? ToolbarItemLocation.After : ToolbarItemLocation.Before)
                            .CssClass("menu-button");
                    */

                    items.Add()
                        .Html("<div>" + Localizer["Title"].Value + "</div>")
                        .Location(System.Globalization.CultureInfo.CurrentCulture.Name != "en-US" ? ToolbarItemLocation.After : ToolbarItemLocation.Before)
                        .CssClass("header-title");

                    items.Add()
                       .Widget(w => w
                           .Button()
                           .Text(System.Globalization.CultureInfo.CurrentCulture.Name != "en-US" ? "English" : "عربي")
                           .OnClick(System.Globalization.CultureInfo.CurrentCulture.Name != "en-US" ? "switchLanguageEn" : "switchLanguageAr")
                       )
                       .Location(System.Globalization.CultureInfo.CurrentCulture.Name != "en-US" ? ToolbarItemLocation.Before : ToolbarItemLocation.After)
                       .CssClass("menu-button");
                })
            )

        </div>
        <div class="layout-body">
            @(Html.DevExtreme().Drawer()
                .ID("layout-drawer")
                .Position(DrawerPosition.Left)
                .Opened(new JS("DMS.restoreDrawerOpened()"))
                .Content(@<text>
                            <div id="layout-drawer-scrollview" class="with-footer">
                                <div class="content">
                                    @RenderBody()
                                </div>
                                <div class="content-block">
                                    <div class="content-footer">
                                        <div id="footer">
                                            Copyright (C) 2020 Zimam Solutions
                                            <br />
                                            All trademarks or registered trademarks are property of their respective owners.
                                        </div>
                                    </div>
                                </div>
                            </div>
                </text>)
         .Template(new TemplateName("navigation-menu"))
            )
        </div>
    </div>

    @using (Html.DevExtreme().NamedTemplate("navigation-menu"))
    {
        <div class="menu-container dx-swatch-additional" style="background-color:#363640">
            <div class="nav-wrap">
                <nav class="main-nav" role="navigation">
                    <ul class="unstyled list-hover-slide">
                        <li class="nav-item"><a href="Dashboard"><i class="fas fa-home"></i>@Localizer["Home"]</a></li>
                        <li class="nav-item categories"><a href="ManageCategory"><i class="fas fa-tag"></i>@Localizer["Categories"]</a></li>
                        <li class="nav-item"><a href="ManageContact"><i class="fas fa-users"></i>@Localizer["Contacts"]</a></li>
                        <li class="nav-item"><a href="ManageSearchKey"><i class="fas fa-key"></i>@Localizer["SearchKeys"]</a></li>
                        <li class="nav-item"><a href="Upload"><i class="fas fa-upload"></i>@Localizer["Upload"]</a></li>

                        @{
                            var claimsIdentity = User.Identity as System.Security.Claims.ClaimsIdentity;

                            string accountType = "";
                            if (claimsIdentity != null)
                            {
                                var c = claimsIdentity.FindFirst(System.Security.Claims.ClaimTypes.UserData);

                                accountType = c.Value;
                            }
                            if (accountType == "Enterprise")
                            {
                                <li class="nav-item"><a href="Settings"><i class="fas fa-user-cog"></i>@Localizer["Settings"]</a></li>
                            }
                        }
                        <li class="nav-item"><a href="SignOut"><i class="fas fa-sign-out-alt"></i>@Localizer["Logout"]</a></li>
                        <li class="nav-item">
                            <partial name="StorageProgress" />
                        </li>
                        <li class="nav-item-upgrade upgrade"><a href="">@Localizer["Upgrade"]</a></li>
                    </ul>
                </nav>
            </div>
            @*
                 @functions{
                     bool IsCurrentPage(string pageName)
                     {
                         var pageUrl = Url.Page(pageName);
                         var currentPageUrl = Url.Page(ViewContext.RouteData.Values["page"].ToString());
                         return pageUrl == currentPageUrl;
                     }
                 }

                 @(Html.DevExtreme().TreeView()
                     .Items(items =>
                     {
                         items.Add()
                         .Text(Localizer["Home"].Value)
                         .Icon("home")
                         .Option("path", Url.Page("Index"))
                         .Selected(IsCurrentPage("Index"));


                         items.Add()
                    .Text(Localizer["Categories"].Value)
                    .Icon("tags")
                //    .ParentId(2)
                    .Option("path", Url.Page("ManageCategory"))
                    .Selected(IsCurrentPage("ManageCategory"));


                         items.Add()
                    .Text(Localizer["Contacts"].Value)
                    .Icon("user")
                    .Option("path", Url.Page("ManageContact"))
                    .Selected(IsCurrentPage("ManageContact"));

                         items.Add()
                     .Text(Localizer["SearchKeys"].Value)
                    .Icon("key")
                    .Option("path", Url.Page("ManageSearchKey"))
                    .Selected(IsCurrentPage("ManageSearchKey"));


                         items.Add()
                .Text(Localizer["Upload"].Value)
                .Icon("upload")
                .Option("path", Url.Page("Upload"))
                         .Selected(IsCurrentPage("upload"));



                         items.Add()
                             .Text(Localizer["Settings"].Value)
                             .Icon("preferences")
                             .Option("path", Url.Page("Settings"))
                 .Visible(false)
                             .Selected(IsCurrentPage("Settings"));

                         if (!User.Identity.IsAuthenticated)
                         {
                             items.Add()
                             .Text(Localizer["Register"].Value)
                             .Icon("plus")
                             .Option("path", Url.Page("Register"))
                             .Selected(IsCurrentPage("register"));

                             items.Add()
                               .Text(Localizer["Login"].Value)
                               .Icon("user")
                               .Option("path", Url.Page("Login"))
                               .Selected(IsCurrentPage("Login"));

                         }
                         else
                         {
                             items.Add()
                               .Text(Localizer["Logout"].Value)
                               .Icon("export")
                               .Option("path", Url.Page("SignOut"))
                               .Selected(IsCurrentPage("SignOut"));
                         }
                     }
                        )
                     .DataStructure(TreeViewDataStructure.Plain)
                     .SelectionMode(NavSelectionMode.Single)
                     .SelectedExpr("selected")
                     .FocusStateEnabled(false)
                     .Width(250)
                     .OnItemClick("DMS.onTreeViewItemClick")
                 )
            *@

        </div>
    }
    <script src="~/js/progressbar.js"></script>
    <script>
        $(document).ready(function () {
            let list = $(".list-hover-slide");
            let upgrade = $(".upgrade");
            list.append(upgrade);
            var xmlHttp = new XMLHttpRequest();

            xmlHttp.open("GET", "api/authorization/getuserstorage", false);
            xmlHttp.send();
            storage = JSON.parse(xmlHttp.responseText);

            var usedStorageLbl = document.getElementById('usedStorage');
            var maxStorageLbl = document.getElementById('maxStorage');
            var usedStoragePrefix = document.getElementById('usedStoragePrefix');
            var maxStoragePrefix = document.getElementById('maxStoragePrefix');
            var prefix;
            var usedStorage = storage.UsedStorage;

            if (usedStorage >= 1000) {
                prefix = "GB";
                usedStorage = usedStorage / 1000;
            } else {
                prefix = "MB";
            }


            usedStorageLbl.innerHTML = calc(usedStorage);
            usedStoragePrefix.innerHTML = prefix;

            var maxStorage = storage.Storage;

            if (maxStorage == -1) {
                prefix = "Unlimited";
                maxStorage = null;
            } else {
                prefix = "GB";
                maxStorage = maxStorage / 1000;
            }


            maxStorageLbl.innerHTML = maxStorage;
            maxStoragePrefix.innerHTML = prefix;

            var bar = new ProgressBar.Circle('#progressBar', {
                strokeWidth: 2,
                easing: 'easeInOut',
                duration: 1400,
                color: '#0087FF',
                trailColor: '#eee',
                trailWidth: 1,
            });



            var perc = (storage.UsedStorage / storage.Storage);
            bar.animate(perc);

            //saveDrawerOpened
           // $("#layout-drawer").dxDrawer("instance").toggle();
        })

        function calc(num) {
            var with2Decimals = num.toString().match(/^-?\d+(?:\.\d{0,2})?/)[0]
            return with2Decimals;
        }
        function switchLanguageEn() {
            switchLanguage("en-US");
        }


        function switchLanguageAr() {

            switchLanguage("ar-SA");
        }

        function switchLanguage(culture) {
            const xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    window.location = "Dashboard";
                }
            }
            const fd = new FormData();
            fd.append('culture', culture);
            xhr.open("POST", "api/Culture", true);
            xhr.send(fd);
        }
        var DMS = (function () {

            var DRAWER_OPENED_KEY = "DMS-drawer-opened";


            var breakpoints = {
                xSmallMedia: window.matchMedia("(max-width: 599.99px)"),
                smallMedia: window.matchMedia("(min-width: 600px) and (max-width: 959.99px)"),
                mediumMedia: window.matchMedia("(min-width: 960px) and (max-width: 1279.99px)"),
                largeMedia: window.matchMedia("(min-width: 1280px)")
            };

            function getDrawer() {
                return $("#layout-drawer").dxDrawer("instance");
            }
         //   console.log(getDrawer());

            function restoreDrawerOpened() {
                var isLarge = breakpoints.largeMedia.matches;
                if (!isLarge)
                    return false;

                var state = sessionStorage.getItem(DRAWER_OPENED_KEY);
                if (state === null)
                    return isLarge;

                return state === "true";
            }


            function saveDrawerOpened() {
                sessionStorage.setItem(DRAWER_OPENED_KEY, getDrawer().option("opened"));
            }

            function updateDrawer() {
                var isXSmall = breakpoints.xSmallMedia.matches,
                    isLarge = breakpoints.largeMedia.matches;
                let d = $("#layout-drawer").dxDrawer("instance");
                getDrawer().option({
                    openedStateMode: isLarge ? "shrink" : "overlap",
                    revealMode: isXSmall ? "slide" : "expand",
                    minSize: isXSmall ? 0 : 0,
                    shading: !isLarge,
                });
            }

            function init() {
                $("#layout-drawer-scrollview").dxScrollView({ direction: "vertical" });

                $.each(breakpoints, function (_, size) {
                    size.addListener(function (e) {
                        if (e.matches)
                            updateDrawer();
                    });
                });

                updateDrawer();
            }

            function navigate(url, delay) {
                setTimeout(function () { location.href = url }, delay);
            }

            function onMenuButtonClick() {

                getDrawer().toggle();

                saveDrawerOpened();

            }

            function onTreeViewItemClick(e) {
                var drawer = getDrawer();
                var savedOpened = restoreDrawerOpened();
                var actualOpened = drawer.option("opened");

                if (!actualOpened) {
                    drawer.show();
                } else {
                    var willHide = !savedOpened || !breakpoints.largeMedia.matches;
                    var willNavigate = !e.itemData.selected;

                    if (willHide)
                        drawer.hide();

                    if (willNavigate)
                        navigate(e.itemData.path, willHide ? 400 : 0);
                }
            }

            return {
                init: init,
                restoreDrawerOpened: restoreDrawerOpened,
                onMenuButtonClick: onMenuButtonClick,
                onTreeViewItemClick: onTreeViewItemClick
            };
        })();
        document.addEventListener("DOMContentLoaded", function documentReady() {
            this.removeEventListener("DOMContentLoaded", documentReady);
            DMS.init();
        });
    </script>

    @RenderSection("Scripts", required: false)

</body>

</html>
