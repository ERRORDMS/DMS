
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="author" content="">

    <title>DMS</title>
    <link href="~/favicon.ico" rel="shortcut icon" type="image/x-icon" />
    <link rel="stylesheet"
          href="https://use.fontawesome.com/releases/v5.6.3/css/all.css"
          integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/"
          crossorigin="anonymous" />
    <link rel="stylesheet" href="~/css/vendor.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/Site.css" />
    <style>
        .space {
            margin-right: 20px;
        }
    </style>
    <script src="~/js/vendor.js" asp-append-version="true"></script>

</head>

<body>
    <div id="app-side-nav-outer-toolbar">
        <div class="layout-header" style="height:80px;overflow: hidden;">
            @(Html.DevExtreme().Toolbar()
                .Items(items =>
                        {
                    items.Add()
                        .Widget(w => w
                            .Button()
                            .Icon("menu")
                            .OnClick("DMS.onMenuButtonClick")
                        )
                        .Location(ToolbarItemLocation.Before)
                        .CssClass("menu-button");
                    items.Add()
                        .Html("<div>Document Management System</div>")
                        .Location(ToolbarItemLocation.Before)
                        .CssClass("header-title");
                })
            )
        </div>
        <div class="layout-body">
            @(Html.DevExtreme().Drawer()
                .ID("layout-drawer")
                .Position(DrawerPosition.Left)
                .Opened(new JS("DMS.restoreDrawerOpened()"))
                .Content(@<text>
                            <div id="layout-drawer-scrollview" class="with-footer">
                                <div class="content">
                                    @RenderBody()
                                </div>
                                <div class="content-block">
                                    <div class="content-footer">
                                        <div id="footer">
                                            Copyright (C) Zimam Solutions
                                            <br />
                                            All trademarks or registered trademarks are property of their respective owners.
                                        </div>
                                    </div>
                                </div>
                            </div>
                </text>)
         .Template(new TemplateName("navigation-menu"))
            )
        </div>
    </div>

    @using (Html.DevExtreme().NamedTemplate("navigation-menu"))
    {
        <div class="menu-container dx-swatch-additional">

            @functions{
                bool IsCurrentPage(string pageName)
                {
                    var pageUrl = Url.Page(pageName);
                    var currentPageUrl = Url.Page(ViewContext.RouteData.Values["page"].ToString());
                    return pageUrl == currentPageUrl;
                }
            }

            @(Html.DevExtreme().TreeView()
                .Items(items =>
                {
                    items.Add()
                    .Text("Home")
                    .Icon("home")
                    .Option("path", Url.Page("Index"))
                    .Selected(IsCurrentPage("Index"));

                    items.Add()
               .Text("Categories")
               .Html("<span class='space'></span>")
               .Icon("tags")
               .HasItems(true)
               .Option("path", Url.Page("AddCategory"))
               .Expanded(IsCurrentPage("AddCategory") || IsCurrentPage("ManageCategory"))
               .Selected(IsCurrentPage("AddCategory") || IsCurrentPage("ManageCategory"))
               .Selected(false);

                    items.Add()
               .Text("Add Category")
               .Icon("plus")
               .ParentId(2)
               .Option("path", Url.Page("AddCategory"))
               .Selected(IsCurrentPage("AddCategory"));


                    items.Add()
               .Text("Manage Category")
               .Icon("edit")
               .ParentId(2)
               .Option("path", Url.Page("ManageCategory"))
               .Selected(IsCurrentPage("ManageCategory"));



                    items.Add()
               .Text("Contacts")
               .Html("<span class='space'></span>")
               .Icon("user")
               .HasItems(true)
               .Option("path", Url.Page("AddContact"))
               .Expanded(IsCurrentPage("AddContact") || IsCurrentPage("ManageContact"))
               .Selected(IsCurrentPage("AddContact") || IsCurrentPage("ManageContact"))
               .Selected(false);

                    items.Add()
               .Text("Add Contact")
               .Icon("plus")
               .ParentId(5)
               .Option("path", Url.Page("AddContact"))
               .Selected(IsCurrentPage("AddContact"));


                    items.Add()
               .Text("Manage Contact")
               .Icon("edit")
               .ParentId(5)
               .Option("path", Url.Page("ManageContact"))
               .Selected(IsCurrentPage("ManageContact"));

                    items.Add()
                .Text("Search Keys")
                .Html("<span class='space'></span>")
                .Icon("key")
                .HasItems(true)
                .Option("path", Url.Page("AddSearchKey"))
                .Expanded(IsCurrentPage("AddSearchKey") || IsCurrentPage("ManageSearchKey"))
                .Selected(IsCurrentPage("AddSearchKey") || IsCurrentPage("ManageSearchKey"))
                .Selected(false);

                    items.Add()
               .Text("Add Key")
               .Icon("plus")
               .ParentId(8)
               .Option("path", Url.Page("AddSearchKey"))
               .Selected(IsCurrentPage("AddSearchKey"));


                    items.Add()
               .Text("Manage Key")
               .Icon("edit")
               .ParentId(8)
               .Option("path", Url.Page("ManageSearchKey"))
               .Selected(IsCurrentPage("ManageSearchKey"));


                    items.Add()
           .Text("Upload")
           .Icon("upload")
           .Option("path", Url.Page("Upload"))
                    .Selected(IsCurrentPage("upload"));


                    items.Add()
                        .Text("Settings")
                        .Icon("preferences")
                        .Option("path", Url.Page("Settings"))
            .Visible(false)
                        .Selected(IsCurrentPage("Settings"));
                    if (!User.Identity.IsAuthenticated)
                    {
                        items.Add()
                        .Text("Register")
                        .Icon("plus")
                        .Option("path", Url.Page("Register"))
                        .Selected(IsCurrentPage("register"));

                        items.Add()
                          .Text("Login")
                          .Icon("user")
                          .Option("path", Url.Page("Login"))
                          .Selected(IsCurrentPage("Login"));

                    }
                    else
                    {
                        items.Add()
                          .Text("Logout")
                          .Icon("export")
                          .Option("path", Url.Page("SignOut"))
                          .Selected(IsCurrentPage("SignOut"));
                    }
                    items.Add()
                    .Text("About")
                    .Icon("info")
                    .Option("path", Url.Page("About"))
                    .Selected(IsCurrentPage("About"));
                }
                   )
                .DataStructure(TreeViewDataStructure.Plain)
                .SelectionMode(NavSelectionMode.Single)
                .SelectedExpr("selected")
                .FocusStateEnabled(false)
                .Width(250)
                .OnItemClick("DMS.onTreeViewItemClick")
            )
        </div>
    }




    <script>

        var DMS = (function () {

            var DRAWER_OPENED_KEY = "DMS-drawer-opened";

            var breakpoints = {
                xSmallMedia: window.matchMedia("(max-width: 599.99px)"),
                smallMedia: window.matchMedia("(min-width: 600px) and (max-width: 959.99px)"),
                mediumMedia: window.matchMedia("(min-width: 960px) and (max-width: 1279.99px)"),
                largeMedia: window.matchMedia("(min-width: 1280px)")
            };

            function getDrawer() {
                return $("#layout-drawer").dxDrawer("instance");
            }

            function restoreDrawerOpened() {
                var isLarge = breakpoints.largeMedia.matches;
                if (!isLarge)
                    return false;

                var state = sessionStorage.getItem(DRAWER_OPENED_KEY);
                if (state === null)
                    return isLarge;

                return state === "true";
            }

            function saveDrawerOpened() {
                sessionStorage.setItem(DRAWER_OPENED_KEY, getDrawer().option("opened"));
            }

            function updateDrawer() {
                var isXSmall = breakpoints.xSmallMedia.matches,
                    isLarge = breakpoints.largeMedia.matches;

                getDrawer().option({
                    openedStateMode: isLarge ? "shrink" : "overlap",
                    revealMode: isXSmall ? "slide" : "expand",
                    minSize: isXSmall ? 0 : 60,
                    shading: !isLarge,
                });
            }

            function init() {
                $("#layout-drawer-scrollview").dxScrollView({ direction: "vertical" });

                $.each(breakpoints, function (_, size) {
                    size.addListener(function (e) {
                        if (e.matches)
                            updateDrawer();
                    });
                });

                updateDrawer();
            }

            function navigate(url, delay) {
                setTimeout(function () { location.href = url }, delay);
            }

            function onMenuButtonClick() {
                getDrawer().toggle();
                saveDrawerOpened();
            }

            function onTreeViewItemClick(e) {
                var drawer = getDrawer();
                var savedOpened = restoreDrawerOpened();
                var actualOpened = drawer.option("opened");

                if (!actualOpened) {
                    drawer.show();
                } else {
                    var willHide = !savedOpened || !breakpoints.largeMedia.matches;
                    var willNavigate = !e.itemData.selected;

                    if (willHide)
                        drawer.hide();

                    if (willNavigate)
                        navigate(e.itemData.path, willHide ? 400 : 0);
                }
            }

            return {
                init: init,
                restoreDrawerOpened: restoreDrawerOpened,
                onMenuButtonClick: onMenuButtonClick,
                onTreeViewItemClick: onTreeViewItemClick
            };
        })();

        document.addEventListener("DOMContentLoaded", function documentReady() {
            this.removeEventListener("DOMContentLoaded", documentReady);
            DMS.init();
        });
        $(document).ready(function () {
            $('')
        })
    </script>

    @RenderSection("Scripts", required: false)

</body>

</html>
